{"version":3,"sources":["AppFonts.js","gruvbox.js","ti_colors.js","ColorScheme.js","components/Pane.js","components/Tile.js","components/ReactRangeSlider.js","components/Slider.js","components/PingSubmit.js","components/PingConfig.js","components/ArcBar.js","components/AtAGlance.js","icons/log_icon.svg","icons/health_icon.svg","icons/delay_icon.svg","components/MagnitudeIndicator.js","components/StatusIndicator.js","components/FlexTable.js","icons/download_icon.svg","components/PingLog.js","components/DelayMonitor.js","components/BarChart.js","components/PieChart.js","components/HealthMonitor.js","App.js","components/Monitor.js","components/CheckBox.js","components/IPAddressTable.js","components/Topology.js","icons/day_icon.svg","icons/night_icon.svg","components/ThemeToggle.js","components/SettingsButton.js","index.js"],"names":["app_fonts","font","fontWeight","color","gruvbox_colors","color_scheme","bg","bg0h","bg0","bg1","bg2","bg3","bg4","fg0","white","red","green","yellow","blue","purple","aqua","gray","orange","ti_color_scheme","red_dark","gray_light","THEME","TI","GRUVBOX","Object","freeze","ThemeContext","createContext","ColorScheme","color_maps","gruvbox","gruvbox_color_theme","ti","ti_color_theme","get_color","name","theme","this","get_color_with_opacity","opacity","hexcolor","r","parseInt","substring","g","b","Pane","props","style","backgroundColor","useContext","className","children","TileHeader","title_style","title","Tile","surface_style","borderTop","boxShadow","borderRadius","Fragment","omit_header","capitalize","str","charAt","toUpperCase","substr","clamp","value","min","max","Math","constants","orientation","horizontal","dimension","direction","reverseDirection","coordinate","vertical","Slider","context","handleFormat","format","handleUpdate","slider","sliderPos","handlePos","handle","setState","limit","grab","handleStart","e","onChangeStart","document","addEventListener","handleDrag","handleEnd","active","stopPropagation","onChange","target","classList","dataset","position","contains","parseFloat","onChangeComplete","removeEventListener","handleKeyDown","preventDefault","sliderValue","keyCode","step","getPositionFromValue","state","percentage","round","getValueFromPosition","pos","baseVal","reverse","node","coordinateStyle","directionStyle","clientCoordinateStyle","touches","getBoundingClientRect","coordinates","fill","label","renderLabels","labels","ref","sl","label_container_style","ResizeObserver","observe","tooltip","handleLabel","coords","fillStyle","assign","fill_style","handleStyle","handle_style","showTooltip","labelItems","labelKeys","keys","length","sort","a","key","labelPosition","labelCoords","labelStyle","push","onMouseDown","onTouchStart","onTouchEnd","s","onMouseUp","rail_style","sh","onTouchMove","onKeyDown","tabIndex","st","tooltip_style","Component","defaultProps","textChangeHandler","event","val","test","changeHandler","value_change_handler","slider_container_ref","React","createRef","progress_color","background","input_style","handle_radius","main_border_radius","cursor","top","transform","width","slider_height","height","border","display","ReactRangeSlider","type","spellCheck","String","contextType","PingSubmit","useState","isHovering","setHoverState","isClicked","setClickState","blue_25","blue_75","submit_style","flexDirection","justifyContent","alignItems","submit_hover_style","submit_click_style","mergeStyles","original","additions","onMouseEnter","onMouseLeave","onClick","setTimeout","click_handler","PingConfiguration","send_pingburst","destination_ip","pingburst_request","id","request_opts","method","headers","Accept","mode","JSON","stringify","fetch","URL","ping_api_location","catch","err","console","log","destination_ips","ip_address_info_array","ip_info","is_selected","ip_address","forEach","ip","paramter_change_handler","timeout","interval","packet_size","num_packets","ArcBar","label_color","sub_label_color","lineCapType","isShadow","bigger_better_thresholds","bigger_worse_thresholds","thresholds","is_bigger_better","threshold","percentFull","total_arc_length","stroke_dash","strokeDasharray","strokeDashoffset","viewBox","xmlns","filter","stroke","d","strokeWidth","strokeLinecap","x","y","filterUnits","colorInterpolationFilters","floodOpacity","result","in","values","stdDeviation","in2","operator","valueText","valueDescription","minLabel","maxLabel","AtAGlance","pingbursts","success_counter","packet_counter","duration_sum","success_sum","pingburst","records","record","was_success","duration","average_duration","success_rate","duration_percent","overall_metric","grade","grade_style","toFixed","floor","MagnitudeIndicator","foreground_color","background_style","overflow","threshold_val","foreground_style","motion","div","animate","transition","initial","effect","place","delayHide","StatusIndicator","is_good_status","border_color","FlexTable","table_headers","table_format","map","col_format","headerValue","row_height","header_fg_color","header_bg_color","body_fg_color","row_rule_color","table_box_shadow","body_bg_color","main_table_style","generateBodyRow","elements","assert","wrapped_elems","ele","index","bodyRowStyle","body_row_style","borderBottom","table_row_elements","table_rows","row","row_component","total_row_height","genRow","scrollbar_style","borderTopLeftRadius","borderTopRightRadius","PingRow","start","match","ping_cols","PingBurstRow","is_collapsed","setCollapse","pingburst_cols","min_start_matches","min_start_str","valid_duration_records","reduce","acc","cur","duration_indicator","error_rate","error_rate_indicator","ping_rows","svg","userSelect","rotate","ping_row_variants","collapsed","open","AnimatePresence","variants","exit","PingLog","download_url","alt","window","src","download_icon","flexBasis","flexGrow","slice","timestamp_string_to_date","timestamp","date_regex_matches","error","date_without_ms","ms","converted_date","Date","setMilliseconds","NetworkDelayChart","series_paths","aspect_ratio","viewportHeight","viewportWidth","margin","bottom","right","left","x_axis_ref","y_axis_ref","x_gridlines_ref","y_gridlines_ref","x_scale","d3","range","y_scale","x_axis","scale","ticks","every","x_gridlines","tickSize","tickFormat","y_axis","y_gridlines","lineGenerator","datum","defined","current","call","text_color","grid_color","available_line_colors","color_name","series_array","info","dest_ip","data","ip_series","nickname","setMinutes","getMinutes","finish","series","domain","all_y_maxes","d_string","lines","path","legend_elements","side","fontSize","textAnchor","dx","dy","preserveAspectRatio","DelayMonitor","marginTop","marginLeft","marginRight","marginBottom","BarChart","results_map","results_array","color_map","category_color_map","average_success","health_category","borderColor","datasets","borderWidth","options","plugins","text","legend","maintainAspectRatio","scales","beginAtZero","grid","PieChart","category_map","Map","constructCategory","filtered_results","set","HEALTH_CATEGORY","URGENT","POOR","FAIR","GOOD","category","success_rate_to_category","HealthMonitor","array","pingburst_average_success","ip_address_info","get_ip_address_info_by_ip","ip_health_info","has","health_info","get","pingburst_num_samples","num_samples","category_color_name_map","gap","MONITOR_STATE","LOG","HEALTH","DELAY","Monitor","monitor_state","current_display","monitor_tab_button_style","log_icon","health_icon","delay_icon","CheckBox","bg_style","fg_style","is_checked","IPAddressRow","newVal","ip_selection_handler","is_connected","IPAddressTable","all_ips_selected","cytoscape","use","dagre","Topology","layout","ti_gray","ti_blue","ti_red","previous_theme","ti_stylesheet","selector","gruvbox_blue","gruvbox_orange","gruvbox_stylesheet","cy","on","_evt","run","ip_info_array","unnormalized_elements","produce","nodes","find","selected","CytoscapeComponent","normalizeElements","stylesheet","wheelSensitivity","ThemeToggle","is_ti_themed","undefined","displayElement","slider_background","day_icon","night_icon","new_is_ti_themed","handle_new_theme","SettingsButton","is_hovering","set_hover_state","fontFamily","paddingLeft","whileTap","fillRule","clipRule","alignSelf","change_handler","nickname_generator","nicknames","random","App","draft","change_ping_api_location_handler","topology","edges","body","getElementsByTagName","boxSizing","setInterval","pingburst_res","topology_res","ok","Error","debug","json","diff_ip_address_info_array","old_topology","new_topology","old_ips","ip_set","add","Set","difference","current_ip","calc_diff_ips","dash_title_container_style","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f77652b5.chunk.js","sourcesContent":["let app_fonts = {\r\n  font: \"18px Raleway, sans-serif\",\r\n  fontWeight: 400,\r\n  \"-webkit-font-smoothing\": \"antialiased\",\r\n  \"-moz-osx-font-smoothing\": \"grayscale\",\r\n  color: \"white\",\r\n};\r\nexport default app_fonts;\r\n","const gruvbox_colors = {\r\n  \"gruvbox-dark0\": \"#282828\",\r\n  \"gruvbox-dark0_hard\": \"#1d2021\",\r\n  \"gruvbox-dark0_soft\": \"#32302f\",\r\n  \"gruvbox-dark1\": \"#3c3836\",\r\n  \"gruvbox-dark2\": \"#504945\",\r\n  \"gruvbox-dark3\": \"#665c54\",\r\n  \"gruvbox-dark4\": \"#7c6f64\",\r\n  \"gruvbox-light0\": \"#fbf1c7\",\r\n  \"gruvbox-light0_hard\": \"#f9f5d7\",\r\n  \"gruvbox-light0_soft\": \"#f2e5bc\",\r\n  \"gruvbox-light1\": \"#ebdbb2\",\r\n  \"gruvbox-light2\": \"#d5c4a1\",\r\n  \"gruvbox-light3\": \"#bdae93\",\r\n  \"gruvbox-light4\": \"#a89984\",\r\n  \"gruvbox-bg\": \"#282828\",\r\n  \"gruvbox-fg\": \"f2e5bc\",\r\n  \"gruvbox-gray\": \"#928374\",\r\n  \"gruvbox-red\": \"#cc241d\",\r\n  \"gruvbox-light-red\": \"#fb4934\",\r\n  \"gruvbox-faded-red\": \"#9d0006\",\r\n  \"gruvbox-green\": \"#98971a\",\r\n  \"gruvbox-light-green\": \"#b8bb26\",\r\n  \"gruvbox-faded-green\": \"#79740e\",\r\n  \"gruvbox-yellow\": \"#d79921\",\r\n  \"gruvbox-light-yellow\": \"#fabd2f\",\r\n  \"gruvbox-faded-yellow\": \"#b57614\",\r\n  \"gruvbox-blue\": \"#458588\",\r\n  \"gruvbox-light-blue\": \"#83a598\",\r\n  \"gruvbox-faded-blue\": \"#076678\",\r\n  \"gruvbox-purple\": \"#b16286\",\r\n  \"gruvbox-light-purple\": \"#d3869b\",\r\n  \"gruvbox-faded-purple\": \"#8f3f71\",\r\n  \"gruvbox-aqua\": \"#689d6a\",\r\n  \"gruvbox-light-aqua\": \"#8ec07c\",\r\n  \"gruvbox-faded-aqua\": \"#427b58\",\r\n  \"gruvbox-orange\": \"#d65d0e\",\r\n  \"gruvbox-light-orange\": \"#fe8019\",\r\n  \"gruvbox-faded-orange\": \"#af3a03\",\r\n};\r\n\r\nconst color_scheme = {\r\n  bg: gruvbox_colors[\"gruvbox-dark0\"],\r\n  bg0h: gruvbox_colors[\"gruvbox-dark0_hard\"],\r\n  bg0: gruvbox_colors[\"gruvbox-dark0\"],\r\n  bg1: gruvbox_colors[\"gruvbox-dark1\"],\r\n  bg2: gruvbox_colors[\"gruvbox-dark2\"],\r\n  bg3: gruvbox_colors[\"gruvbox-dark3\"],\r\n  bg4: gruvbox_colors[\"gruvbox-dark4\"],\r\n  fg0: gruvbox_colors[\"gruvbox-light0\"],\r\n  white: \"#FFFFFF\",\r\n  red: gruvbox_colors[\"gruvbox-light-red\"],\r\n  green: gruvbox_colors[\"gruvbox-light-green\"],\r\n  yellow: gruvbox_colors[\"gruvbox-light-yellow\"],\r\n  blue: gruvbox_colors[\"gruvbox-light-blue\"],\r\n  purple: gruvbox_colors[\"gruvbox-light-purple\"],\r\n  aqua: gruvbox_colors[\"gruvbox-light-aqua\"],\r\n  gray: gruvbox_colors[\"gruvbox-gray\"],\r\n  orange: gruvbox_colors[\"gruvbox-orange\"],\r\n};\r\n\r\nexport default color_scheme;\r\n","const ti_color_scheme = {\r\n  white: \"#FFFFFF\",\r\n  bg: \"#ECECEC\",\r\n  // bg0h: gruvbox_colors[\"gruvbox-dark0_hard\"],\r\n  bg0: \"#ECECEC\",\r\n  bg1: \"#EBF6F7\",\r\n  bg2: \"#F7F7F7\",\r\n  bg3: \"#FFFFFF\",\r\n  // bg4: gruvbox_colors[\"gruvbox-dark4\"],\r\n  // fg0: gruvbox_colors[\"gruvbox-light0\"],\r\n  red: \"#CC0000\",\r\n  red_dark: \"#AE0000\",\r\n  green: \"#44BB55\",\r\n  yellow: \"#fabd2f\",\r\n  orange: \"#FE8019\",\r\n  blue: \"#007C8C\",\r\n  // purple: gruvbox_colors[\"gruvbox-light-purple\"],\r\n  // aqua: gruvbox_colors[\"gruvbox-light-aqua\"],\r\n  gray: \"#555555\",\r\n  gray_light: \"#98999B\",\r\n  // orange: gruvbox_colors[\"gruvbox-orange\"],\r\n};\r\n\r\nexport default ti_color_scheme;\r\n","import gruvbox_color_theme from \"./gruvbox.js\";\r\nimport ti_color_theme from \"./ti_colors.js\";\r\nimport { createContext } from \"react\";\r\n\r\nconst THEME = {\r\n  TI: \"ti\",\r\n  GRUVBOX: \"gruvbox\",\r\n};\r\nObject.freeze(THEME);\r\n\r\nconst ThemeContext = createContext(THEME.GRUVBOX);\r\n\r\nconst ColorScheme = {\r\n  color_maps: {\r\n    gruvbox: gruvbox_color_theme,\r\n    ti: ti_color_theme,\r\n  },\r\n\r\n  get_color: function (name, theme = THEME.GRUVBOX) {\r\n    return this.color_maps[theme][name];\r\n  },\r\n  get_color_with_opacity: function (color, opacity, theme = THEME.GRUVBOX) {\r\n    //opacity [0,1]\r\n    let hexcolor = this.get_color(color, theme);\r\n    const r = parseInt(hexcolor.substring(1, 3), 16);\r\n    const g = parseInt(hexcolor.substring(3, 5), 16);\r\n    const b = parseInt(hexcolor.substring(5), 16);\r\n    return `rgba(${r},${g},${b},${opacity})`;\r\n  },\r\n};\r\n\r\nexport { ColorScheme, THEME, ThemeContext };\r\n","import { useContext } from \"react\";\r\nimport { ColorScheme, ThemeContext, THEME } from \"../ColorScheme\";\r\nimport \"../assets/Pane.css\";\r\n\r\nexport default function Pane(props) {\r\n  const theme = useContext(ThemeContext);\r\n  const style = {\r\n    backgroundColor:\r\n      theme === THEME.TI ? \"rgba(0,0,0,0)\" : ColorScheme.get_color(\"bg1\"),\r\n  };\r\n  return (\r\n    <div className=\"pane\" style={style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport \"../assets/Tile.css\";\r\n\r\nexport function TileHeader(props) {\r\n  const theme = useContext(ThemeContext);\r\n  let title_style = null;\r\n  if (theme === THEME.TI) {\r\n    title_style = {\r\n      color: ColorScheme.get_color(\"gray\", theme),\r\n      fontWeight: 600,\r\n    };\r\n  }\r\n  return (\r\n    <h2 style={title_style} className=\"tile_header\">\r\n      {props.title}\r\n    </h2>\r\n  );\r\n}\r\n\r\nexport default function Tile(props) {\r\n  const theme = useContext(ThemeContext);\r\n  let surface_style = null;\r\n  if (theme === THEME.TI) {\r\n    surface_style = {\r\n      backgroundColor: ColorScheme.get_color(\"bg2\", theme),\r\n      borderTop: `3px solid ${ColorScheme.get_color(\"red\", theme)}`,\r\n      boxShadow: \"0px 1px 14px rgba(0, 0, 0, 0.3)\",\r\n      borderRadius: 0,\r\n    };\r\n  } else {\r\n    surface_style = {\r\n      backgroundColor: ColorScheme.get_color(\"bg2\", theme),\r\n      borderRadius: 10,\r\n    };\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      {!props.omit_header && <TileHeader title={props.title} />}\r\n      <div style={surface_style} className=\"tile\">\r\n        {props.children}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","/* eslint no-debugger: \"warn\" */\r\nimport React, { Component } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\n/**\r\n * Capitalize first letter of string\r\n * @private\r\n * @param  {string} - String\r\n * @return {string} - String with first letter capitalized\r\n */\r\nfunction capitalize(str) {\r\n  return str.charAt(0).toUpperCase() + str.substr(1);\r\n}\r\n\r\n/**\r\n * Clamp position between a range\r\n * @param  {number} - Value to be clamped\r\n * @param  {number} - Minimum value in range\r\n * @param  {number} - Maximum value in range\r\n * @return {number} - Clamped value\r\n */\r\nfunction clamp(value, min, max) {\r\n  return Math.min(Math.max(value, min), max);\r\n}\r\n\r\n/**\r\n * Predefined constants\r\n * @type {Object}\r\n */\r\nconst constants = {\r\n  orientation: {\r\n    horizontal: {\r\n      dimension: \"width\",\r\n      direction: \"left\",\r\n      reverseDirection: \"right\",\r\n      coordinate: \"x\",\r\n    },\r\n    vertical: {\r\n      dimension: \"height\",\r\n      direction: \"top\",\r\n      reverseDirection: \"bottom\",\r\n      coordinate: \"y\",\r\n    },\r\n  },\r\n};\r\n\r\nclass Slider extends Component {\r\n  // static propTypes = {\r\n  //   min: PropTypes.number,\r\n  //   max: PropTypes.number,\r\n  //   step: PropTypes.number,\r\n  //   value: PropTypes.number,\r\n  //   orientation: PropTypes.string,\r\n  //   tooltip: PropTypes.bool,\r\n  //   reverse: PropTypes.bool,\r\n  //   labels: PropTypes.object,\r\n  //   handleLabel: PropTypes.string,\r\n  //   format: PropTypes.func,\r\n  //   onChangeStart: PropTypes.func,\r\n  //   onChange: PropTypes.func,\r\n  //   onChangeComplete: PropTypes.func,\r\n  // };\r\n\r\n  static defaultProps = {\r\n    min: 0,\r\n    max: 100,\r\n    step: 1,\r\n    value: 0,\r\n    orientation: \"horizontal\",\r\n    tooltip: true,\r\n    reverse: false,\r\n    labels: {},\r\n    handleLabel: \"\",\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      active: false,\r\n      limit: 0,\r\n      grab: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleUpdate();\r\n    const resizeObserver = new ResizeObserver(this.handleUpdate);\r\n    resizeObserver.observe(this.slider);\r\n  }\r\n\r\n  /**\r\n   * Format label/tooltip value\r\n   * @param  {Number} - value\r\n   * @return {Formatted Number}\r\n   */\r\n  handleFormat = (value) => {\r\n    const { format } = this.props;\r\n    return format ? format(value) : value;\r\n  };\r\n\r\n  /**\r\n   * Update slider state on change\r\n   * @return {void}\r\n   */\r\n  handleUpdate = () => {\r\n    if (!this.slider) {\r\n      // for shallow rendering\r\n      return;\r\n    }\r\n    const { orientation } = this.props;\r\n    const dimension = capitalize(constants.orientation[orientation].dimension);\r\n    const sliderPos = this.slider[`offset${dimension}`];\r\n    const handlePos = this.handle[`offset${dimension}`];\r\n    this.setState({\r\n      limit: sliderPos - handlePos,\r\n      grab: handlePos / 2,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Attach event listeners to mousemove/mouseup events\r\n   * @return {void}\r\n   */\r\n  handleStart = (e) => {\r\n    const { onChangeStart } = this.props;\r\n    document.addEventListener(\"mousemove\", this.handleDrag);\r\n    document.addEventListener(\"mouseup\", this.handleEnd);\r\n    this.setState(\r\n      {\r\n        active: true,\r\n      },\r\n      () => {\r\n        onChangeStart && onChangeStart(e);\r\n      }\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Handle drag/mousemove event\r\n   * @param  {Object} e - Event object\r\n   * @return {void}\r\n   */\r\n  handleDrag = (e) => {\r\n    e.stopPropagation();\r\n    const { onChange } = this.props;\r\n    const {\r\n      target: { className, classList, dataset },\r\n    } = e;\r\n    if (!onChange || className === \"rangeslider__labels\") return;\r\n\r\n    let value = this.position(e);\r\n\r\n    if (\r\n      classList &&\r\n      classList.contains(\"rangeslider__label-item\") &&\r\n      dataset.value\r\n    ) {\r\n      value = parseFloat(dataset.value);\r\n    }\r\n\r\n    onChange && onChange(value, e);\r\n  };\r\n\r\n  /**\r\n   * Detach event listeners to mousemove/mouseup events\r\n   * @return {void}\r\n   */\r\n  handleEnd = (e) => {\r\n    const { onChangeComplete } = this.props;\r\n    this.setState(\r\n      {\r\n        active: false,\r\n      },\r\n      () => {\r\n        onChangeComplete && onChangeComplete(e);\r\n      }\r\n    );\r\n    document.removeEventListener(\"mousemove\", this.handleDrag);\r\n    document.removeEventListener(\"mouseup\", this.handleEnd);\r\n  };\r\n\r\n  /**\r\n   * Support for key events on the slider handle\r\n   * @param  {Object} e - Event object\r\n   * @return {void}\r\n   */\r\n  handleKeyDown = (e) => {\r\n    e.preventDefault();\r\n    const { keyCode } = e;\r\n    const { value, min, max, step, onChange } = this.props;\r\n    let sliderValue;\r\n\r\n    switch (keyCode) {\r\n      case 38:\r\n      case 39:\r\n        sliderValue = value + step > max ? max : value + step;\r\n        onChange && onChange(sliderValue, e);\r\n        break;\r\n      case 37:\r\n      case 40:\r\n        sliderValue = value - step < min ? min : value - step;\r\n        onChange && onChange(sliderValue, e);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Calculate position of slider based on its value\r\n   * @param  {number} value - Current value of slider\r\n   * @return {position} pos - Calculated position of slider based on value\r\n   */\r\n  getPositionFromValue = (value) => {\r\n    const { limit } = this.state;\r\n    const { min, max } = this.props;\r\n    const diffMaxMin = max - min;\r\n    const diffValMin = value - min;\r\n    const percentage = diffValMin / diffMaxMin;\r\n    const pos = Math.round(percentage * limit);\r\n\r\n    return pos;\r\n  };\r\n\r\n  /**\r\n   * Translate position of slider to slider value\r\n   * @param  {number} pos - Current position/coordinates of slider\r\n   * @return {number} value - Slider value\r\n   */\r\n  getValueFromPosition = (pos) => {\r\n    const { limit } = this.state;\r\n    const { orientation, min, max, step } = this.props;\r\n    const percentage = clamp(pos, 0, limit) / (limit || 1);\r\n    const baseVal = step * Math.round((percentage * (max - min)) / step);\r\n    const value = orientation === \"horizontal\" ? baseVal + min : max - baseVal;\r\n\r\n    return clamp(value, min, max);\r\n  };\r\n\r\n  /**\r\n   * Calculate position of slider based on value\r\n   * @param  {Object} e - Event object\r\n   * @return {number} value - Slider value\r\n   */\r\n  position = (e) => {\r\n    const { grab } = this.state;\r\n    const { orientation, reverse } = this.props;\r\n\r\n    const node = this.slider;\r\n    const coordinateStyle = constants.orientation[orientation].coordinate;\r\n    const directionStyle = reverse\r\n      ? constants.orientation[orientation].reverseDirection\r\n      : constants.orientation[orientation].direction;\r\n    const clientCoordinateStyle = `client${capitalize(coordinateStyle)}`;\r\n    const coordinate = !e.touches\r\n      ? e[clientCoordinateStyle]\r\n      : e.touches[0][clientCoordinateStyle];\r\n    const direction = node.getBoundingClientRect()[directionStyle];\r\n    const pos = reverse\r\n      ? direction - coordinate - grab\r\n      : coordinate - direction - grab;\r\n    const value = this.getValueFromPosition(pos);\r\n\r\n    return value;\r\n  };\r\n\r\n  /**\r\n   * Grab coordinates of slider\r\n   * @param  {Object} pos - Position object\r\n   * @return {Object} - Slider fill/handle coordinates\r\n   */\r\n  coordinates = (pos) => {\r\n    const { limit, grab } = this.state;\r\n    const { orientation } = this.props;\r\n    const value = this.getValueFromPosition(pos);\r\n    const position = this.getPositionFromValue(value);\r\n    const handlePos = orientation === \"horizontal\" ? position + grab : position;\r\n    const fillPos =\r\n      orientation === \"horizontal\" ? handlePos : limit - handlePos;\r\n\r\n    return {\r\n      fill: fillPos,\r\n      handle: handlePos,\r\n      label: handlePos,\r\n    };\r\n  };\r\n\r\n  renderLabels = (labels) => (\r\n    <ul\r\n      ref={(sl) => {\r\n        this.labels = sl;\r\n      }}\r\n      style={this.props.label_container_style}\r\n    >\r\n      {labels}\r\n    </ul>\r\n  );\r\n\r\n  render() {\r\n    const {\r\n      value,\r\n      orientation,\r\n      tooltip,\r\n      reverse,\r\n      labels,\r\n      min,\r\n      max,\r\n      handleLabel,\r\n    } = this.props;\r\n    const { active } = this.state;\r\n    const dimension = constants.orientation[orientation].dimension;\r\n    const direction = reverse\r\n      ? constants.orientation[orientation].reverseDirection\r\n      : constants.orientation[orientation].direction;\r\n    const position = this.getPositionFromValue(value);\r\n    const coords = this.coordinates(position);\r\n    const fillStyle = Object.assign({}, this.props.fill_style, {\r\n      [dimension]: `${coords.fill}px`,\r\n    });\r\n    const handleStyle = Object.assign({}, this.props.handle_style, {\r\n      [direction]: `${coords.handle}px`,\r\n    });\r\n    let showTooltip = tooltip && active;\r\n\r\n    let labelItems = [];\r\n    let labelKeys = Object.keys(labels);\r\n\r\n    if (labelKeys.length > 0) {\r\n      labelKeys = labelKeys.sort((a, b) => (reverse ? a - b : b - a));\r\n\r\n      for (let key of labelKeys) {\r\n        const labelPosition = this.getPositionFromValue(key);\r\n        const labelCoords = this.coordinates(labelPosition);\r\n        const labelStyle = Object.assign({}, this.props.labelStyle, {\r\n          [direction]: `${labelCoords.label}px`,\r\n        });\r\n\r\n        labelItems.push(\r\n          <li\r\n            key={key}\r\n            data-value={key}\r\n            onMouseDown={this.handleDrag}\r\n            onTouchStart={this.handleStart}\r\n            onTouchEnd={this.handleEnd}\r\n            style={labelStyle}\r\n          >\r\n            {this.props.labels[key]}\r\n          </li>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={(s) => {\r\n          this.slider = s;\r\n        }}\r\n        onMouseDown={this.handleDrag}\r\n        onMouseUp={this.handleEnd}\r\n        onTouchStart={this.handleStart}\r\n        onTouchEnd={this.handleEnd}\r\n        aria-valuemin={min}\r\n        aria-valuemax={max}\r\n        aria-valuenow={value}\r\n        aria-orientation={orientation}\r\n        style={this.props.rail_style}\r\n      >\r\n        <div style={fillStyle} />\r\n        <div\r\n          ref={(sh) => {\r\n            this.handle = sh;\r\n          }}\r\n          onMouseDown={this.handleStart}\r\n          onTouchMove={this.handleDrag}\r\n          onTouchEnd={this.handleEnd}\r\n          onKeyDown={this.handleKeyDown}\r\n          style={handleStyle}\r\n          tabIndex={0}\r\n        >\r\n          {showTooltip ? (\r\n            <div\r\n              ref={(st) => {\r\n                this.tooltip = st;\r\n              }}\r\n              style={this.props.tooltip_style}\r\n            >\r\n              <span>{this.handleFormat(value)}</span>\r\n            </div>\r\n          ) : null}\r\n          <div className=\"rangeslider__handle-label\">{handleLabel}</div>\r\n        </div>\r\n        {labels ? this.renderLabels(labelItems) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Slider;\r\n","import React from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport \"../assets/Slider.css\";\r\nimport ReactRangeSlider from \"./ReactRangeSlider\";\r\n\r\nexport default class Slider extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.slider_container_ref = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  textChangeHandler = (event) => {\r\n    let val = event.target.value;\r\n    const is_valid_number = /^-{0,1}\\d+$/.test(val);\r\n    if (!is_valid_number) {\r\n      return;\r\n    }\r\n    val = Math.max(this.props.min, val);\r\n    val = Math.min(this.props.max, val);\r\n    this.changeHandler(val);\r\n  };\r\n\r\n  changeHandler = (value) => {\r\n    this.props.value_change_handler(this.props.name, value);\r\n  };\r\n\r\n  render() {\r\n    const theme = this.context;\r\n    const progress_color = ColorScheme.get_color(\"blue\", theme);\r\n    const slider_height = 12;\r\n    let background = null;\r\n    let input_style = null;\r\n    let handle_radius = null;\r\n    let main_border_radius = null;\r\n    let handle_style = {\r\n      cursor: \"pointer\",\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      transform: \"translate3d(-50%, -50%, 0)\",\r\n    };\r\n    if (theme === THEME.TI) {\r\n      let gray = ColorScheme.get_color(\"gray\", theme);\r\n      background = ColorScheme.get_color(\"bg0\", theme);\r\n      handle_radius = 0;\r\n      main_border_radius = 0;\r\n      handle_style = {\r\n        width: slider_height * 2,\r\n        height: (slider_height * 3) / 2,\r\n        backgroundColor: progress_color,\r\n        boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\r\n        ...handle_style,\r\n      };\r\n      input_style = {\r\n        borderTop: `1px solid ${ColorScheme.get_color(\"red\", THEME.TI)}`,\r\n        boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.25) \",\r\n        backgroundColor: background,\r\n        borderRadius: 0,\r\n        color: gray,\r\n        fontWeight: 600,\r\n      };\r\n    } else {\r\n      background = ColorScheme.get_color(\"bg1\", theme);\r\n      handle_radius = (slider_height * 5) / 6;\r\n      main_border_radius = 9;\r\n\r\n      input_style = {\r\n        backgroundColor: background,\r\n        color: ColorScheme.get_color(\"white\", theme),\r\n      };\r\n      handle_style = {\r\n        borderRadius: handle_radius,\r\n        width: handle_radius * 2,\r\n        height: handle_radius * 2,\r\n        backgroundColor: progress_color,\r\n        border: `1px solid ${background}`,\r\n        boxShadow: \"none\",\r\n        ...handle_style,\r\n      };\r\n    }\r\n    const step = this.props.step || 1;\r\n\r\n    const fill_style = {\r\n      display: \"block\",\r\n      height: slider_height,\r\n      backgroundColor: progress_color,\r\n      borderRadius: main_border_radius,\r\n      position: \"absolute\",\r\n    };\r\n    const rail_style = {\r\n      borderRadius: main_border_radius,\r\n      height: slider_height,\r\n      position: \"relative\",\r\n      backgroundColor: background,\r\n      width: \"60%\",\r\n    };\r\n\r\n    return (\r\n      <div ref={this.slider_container_ref} className=\"slider_container\">\r\n        <ReactRangeSlider\r\n          handle_style={handle_style}\r\n          tooltip={false}\r\n          fill_style={fill_style}\r\n          rail_style={rail_style}\r\n          min={this.props.min}\r\n          max={this.props.max}\r\n          step={step}\r\n          value={this.props.value}\r\n          onChange={this.changeHandler}\r\n        />\r\n        <input\r\n          className=\"slider_input\"\r\n          type=\"text\"\r\n          style={input_style}\r\n          spellCheck=\"false\"\r\n          value={String(this.props.value)}\r\n          onChange={this.textChangeHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSlider.contextType = ThemeContext;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport \"../assets/PingSubmit.css\";\r\n\r\nexport default function PingSubmit(props) {\r\n  const [isHovering, setHoverState] = useState(false);\r\n  const [isClicked, setClickState] = useState(false);\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const blue = ColorScheme.get_color(\"blue\", theme);\r\n  const blue_25 = ColorScheme.get_color_with_opacity(\"blue\", 0.25, theme);\r\n  const blue_75 = ColorScheme.get_color_with_opacity(\"blue\", 0.75, theme);\r\n  let submit_style = {\r\n    backgroundColor: blue,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n  let submit_hover_style = {\r\n    boxShadow: `0px 0px 11px 0px ${blue_25}`,\r\n  };\r\n  let submit_click_style = {\r\n    backgroundColor: blue_75,\r\n  };\r\n  if (theme === THEME.TI) {\r\n    submit_style = {\r\n      borderRadius: 0,\r\n      ...submit_style,\r\n    };\r\n  }\r\n\r\n  function mergeStyles(original, additions) {\r\n    //adds and potential overwrites original styles with new styles\r\n    for (let key in additions) {\r\n      original[key] = additions[key];\r\n    }\r\n  }\r\n\r\n  if (isHovering) {\r\n    mergeStyles(submit_style, submit_hover_style);\r\n  }\r\n\r\n  if (isClicked) {\r\n    mergeStyles(submit_style, submit_click_style);\r\n  }\r\n\r\n  function click_handler(event) {\r\n    setClickState(true);\r\n    setTimeout(() => setClickState(false), 50);\r\n    props.click_handler(event);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      type=\"button\"\r\n      // whileHover={{ scale: 1.05 }}\r\n      // whileTap={{ scale: 0.95 }}\r\n      onMouseEnter={() => setHoverState(true)}\r\n      onMouseLeave={() => setHoverState(false)}\r\n      onClick={click_handler}\r\n      style={submit_style}\r\n      className=\"blue_button ping_submit\"\r\n    >\r\n      Submit\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Slider from \"./Slider\";\r\nimport \"../assets/PingConfig.css\";\r\nimport PingSubmit from \"./PingSubmit\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\n\r\nexport default class PingConfiguration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      packet_size: 53,\r\n      timeout: 500,\r\n      interval: 1000,\r\n      num_packets: 10,\r\n    };\r\n  }\r\n\r\n  send_pingburst = (destination_ip) => {\r\n    const pc_ids = [\"packet_size\", \"num_packets\", \"timeout\", \"interval\"];\r\n    const pingburst_request = {};\r\n    for (const id of pc_ids) {\r\n      pingburst_request[id] = this.state[id];\r\n    }\r\n    pingburst_request[\"destination\"] = destination_ip;\r\n    const request_opts = {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      mode: \"cors\",\r\n    };\r\n    request_opts[\"body\"] = JSON.stringify(pingburst_request);\r\n    fetch(\r\n      new URL(\"pingbursts\", document.ping_api_location),\r\n      request_opts\r\n    ).catch((err) => console.log(err));\r\n    // console.log(\"Sent Pingburst!\", pingburst_request);\r\n  };\r\n\r\n  click_handler = () => {\r\n    const destination_ips = [];\r\n    for (let ip_info of this.props.ip_address_info_array)\r\n      if (ip_info.is_selected) {\r\n        destination_ips.push(ip_info.ip_address);\r\n      }\r\n    destination_ips.forEach((ip) => {\r\n      this.send_pingburst(ip);\r\n    });\r\n  };\r\n\r\n  paramter_change_handler = (name, value) => {\r\n    this.setState((state) => {\r\n      if (name === \"interval\" && value < state.timeout) {\r\n        return {\r\n          interval: value,\r\n          timeout: value,\r\n        };\r\n      }\r\n      if (name === \"timeout\" && value > state.interval) {\r\n        return {\r\n          interval: value,\r\n          timeout: value,\r\n        };\r\n      }\r\n      return { [name]: value };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const theme = this.context;\r\n    let labelStyle = null;\r\n    if (theme === THEME.TI) {\r\n      labelStyle = {\r\n        color: ColorScheme.get_color(\"gray\", theme),\r\n        fontWeight: 600,\r\n      };\r\n    } else {\r\n      labelStyle = {};\r\n    }\r\n\r\n    return (\r\n      <div className=\"ping_form_container\">\r\n        <label style={labelStyle} className=\"ping_form_label\">\r\n          Packet Size\r\n        </label>\r\n        <Slider\r\n          min={0}\r\n          step={25}\r\n          max={100}\r\n          name=\"packet_size\"\r\n          value={this.state.packet_size}\r\n          value_change_handler={this.paramter_change_handler}\r\n        />\r\n        <label style={labelStyle} className=\"ping_form_label\">\r\n          Timeout\r\n        </label>\r\n        <Slider\r\n          min={0}\r\n          step={500}\r\n          max={9999}\r\n          name=\"timeout\"\r\n          value={this.state.timeout}\r\n          value_change_handler={this.paramter_change_handler}\r\n        />\r\n        <label style={labelStyle} className=\"ping_form_label\">\r\n          Interval\r\n        </label>\r\n        <Slider\r\n          min={0}\r\n          step={500}\r\n          max={9999}\r\n          name=\"interval\"\r\n          value={this.state.interval}\r\n          value_change_handler={this.paramter_change_handler}\r\n        />\r\n        <label style={labelStyle} className=\"ping_form_label\">\r\n          Number of Packets\r\n        </label>\r\n        <Slider\r\n          min={1}\r\n          max={30}\r\n          name=\"num_packets\"\r\n          value={this.state.num_packets}\r\n          value_change_handler={this.paramter_change_handler}\r\n        />\r\n        <PingSubmit click_handler={this.click_handler} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPingConfiguration.contextType = ThemeContext;\r\n","import React, { useContext } from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport \"../assets/ArcBar.css\";\r\n\r\nexport default function ArcBar(props) {\r\n  const theme = useContext(ThemeContext);\r\n  let label_color = null;\r\n  let sub_label_color = null;\r\n  let lineCapType = null;\r\n  let backgroundColor = null;\r\n  let isShadow = null;\r\n  const red = ColorScheme.get_color(\"red\", theme);\r\n  const yellow = ColorScheme.get_color(\"yellow\", theme);\r\n  const green = ColorScheme.get_color(\"green\", theme);\r\n  if (theme === THEME.TI) {\r\n    isShadow = true;\r\n    backgroundColor = ColorScheme.get_color(\"bg0\", THEME.TI);\r\n    sub_label_color = ColorScheme.get_color(\"gray_light\", THEME.TI);\r\n    label_color = ColorScheme.get_color(\"gray\", THEME.TI);\r\n    lineCapType = \"square\";\r\n  } else {\r\n    backgroundColor = ColorScheme.get_color(\"bg1\", THEME.GRUVBOX);\r\n    sub_label_color = ColorScheme.get_color(\"gray\", THEME.GRUVBOX);\r\n    label_color = ColorScheme.get_color(\"white\", THEME.GRUVBOX);\r\n    lineCapType = \"round\";\r\n  }\r\n  const bigger_better_thresholds = {\r\n    0.3: red,\r\n    0.6: yellow,\r\n    0.9: green,\r\n  };\r\n  const bigger_worse_thresholds = {\r\n    0.3: green,\r\n    0.6: yellow,\r\n    0.9: red,\r\n  };\r\n  let thresholds = props.is_bigger_better\r\n    ? bigger_better_thresholds\r\n    : bigger_worse_thresholds;\r\n  let progress_color = props.is_bigger_better ? green : red;\r\n  for (let threshold in thresholds) {\r\n    if (threshold > props.percentFull) {\r\n      progress_color = thresholds[threshold];\r\n      break;\r\n    }\r\n  }\r\n  let total_arc_length = 210.487;\r\n  let percent = props.percentFull;\r\n  const stroke_dash = {\r\n    strokeDasharray: total_arc_length,\r\n    strokeDashoffset: -1 * total_arc_length * (1 - percent),\r\n  };\r\n  return (\r\n    <div className=\"arc_bar_container\">\r\n      <svg\r\n        className=\"arc_bar\"\r\n        width=\"144\"\r\n        height=\"77\"\r\n        viewBox=\"0 0 144 77\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <g filter={isShadow ? `url(#arc_bar_shadow)` : null}>\r\n          <path\r\n            style={{ stroke: backgroundColor }}\r\n            d=\"M139 72\r\n        C139 54.2305 131.941 37.1888 119.376 24.6238\r\n        C106.811 12.0589 89.7695 5 72 5\r\n        C54.2305 5 37.1888 12.0589 24.6239 24.6238\r\n        C12.0589 37.1888 5 54.2305 5 72\"\r\n            strokeWidth=\"10\"\r\n            strokeLinecap={lineCapType}\r\n          />\r\n          <path\r\n            style={{ stroke: progress_color, ...stroke_dash }}\r\n            d=\"M139 72\r\n        C139 54.2305 131.941 37.1888 119.376 24.6238\r\n        C106.811 12.0589 89.7695 5 72 5\r\n        C54.2305 5 37.1888 12.0589 24.6239 24.6238\r\n        C12.0589 37.1888 5 54.2305 5 72\"\r\n            strokeWidth=\"10\"\r\n            strokeLinecap={lineCapType}\r\n          />\r\n        </g>\r\n        <defs>\r\n          <filter\r\n            id=\"arc_bar_shadow\"\r\n            x=\"0.889893\"\r\n            y=\"0\"\r\n            width=\"166.92\"\r\n            height=\"94.5\"\r\n            filterUnits=\"userSpaceOnUse\"\r\n            colorInterpolationFilters=\"sRGB\"\r\n          >\r\n            <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n            <feColorMatrix\r\n              in=\"SourceAlpha\"\r\n              type=\"matrix\"\r\n              values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n              result=\"hardAlpha\"\r\n            />\r\n            <feOffset />\r\n            <feGaussianBlur stdDeviation=\"2\" />\r\n            <feComposite in2=\"hardAlpha\" operator=\"out\" />\r\n            <feColorMatrix\r\n              type=\"matrix\"\r\n              values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\"\r\n            />\r\n            <feBlend\r\n              mode=\"normal\"\r\n              in2=\"BackgroundImageFix\"\r\n              result=\"effect1_dropShadow_176:280\"\r\n            />\r\n            <feBlend\r\n              mode=\"normal\"\r\n              in=\"SourceGraphic\"\r\n              in2=\"effect1_dropShadow_176:280\"\r\n              result=\"shape\"\r\n            />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n      <h3 style={{ color: label_color }} className=\"arc_bar_label_top\">\r\n        {props.valueText}\r\n      </h3>\r\n      <h4 style={{ color: label_color }} className=\"arc_bar_label_bottom\">\r\n        {props.valueDescription}\r\n      </h4>\r\n      <p\r\n        style={{ color: sub_label_color }}\r\n        className=\"arc_bar_tick arc_bar_tick_left\"\r\n      >\r\n        {props.minLabel}\r\n      </p>\r\n      <p\r\n        style={{ color: sub_label_color }}\r\n        className=\"arc_bar_tick arc_bar_tick_right\"\r\n      >\r\n        {props.maxLabel}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport \"../assets/AtAGlance.css\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport ArcBar from \"./ArcBar.js\";\r\n\r\nexport default function AtAGlance(props) {\r\n  const pingbursts = props.pingbursts;\r\n  let success_counter = 0;\r\n  let packet_counter = 0;\r\n  let duration_sum = 0;\r\n  let success_sum = 0;\r\n  for (const pingburst of pingbursts) {\r\n    for (const record of pingburst.records) {\r\n      success_sum += record.was_success ? 1 : 0;\r\n      packet_counter++;\r\n      if (record.was_success) {\r\n        duration_sum += record.duration;\r\n        success_counter++;\r\n      }\r\n    }\r\n  }\r\n\r\n  const average_duration =\r\n    success_counter !== 0 ? duration_sum / success_counter : 1;\r\n  const success_rate = packet_counter !== 0 ? success_sum / packet_counter : 1;\r\n  const max_duration = 1000;\r\n  let duration_percent = Math.min(1, average_duration / max_duration);\r\n\r\n  let thresholds = {\r\n    0.5: \"C\",\r\n    0.6: \"B\",\r\n    0.7: \"A\",\r\n    0.8: \"A+\",\r\n  };\r\n  const overall_metric = (1 - duration_percent + success_rate) / 2;\r\n  let grade = \"D\";\r\n  for (const threshold in thresholds) {\r\n    if (threshold < overall_metric) {\r\n      grade = thresholds[threshold];\r\n    }\r\n  }\r\n\r\n  const theme = useContext(ThemeContext);\r\n  let grade_style = null;\r\n  if (theme === THEME.TI) {\r\n    grade_style = {\r\n      color: ColorScheme.get_color(\"gray\", THEME.TI),\r\n      fontWeight: 600,\r\n    };\r\n  } else {\r\n    grade_style = {\r\n      color: ColorScheme.get_color(\"white\", THEME.GRUVBOX),\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div className=\"at_a_glance_container\">\r\n      <ArcBar\r\n        is_bigger_better={true}\r\n        minLabel=\"0%\"\r\n        maxLabel=\"100%\"\r\n        valueText={`${(success_rate * 100).toFixed(1)}%`}\r\n        valueDescription=\"Success Rate\"\r\n        percentFull={success_rate}\r\n      />\r\n      <ArcBar\r\n        is_bigger_better={false}\r\n        minLabel=\"0\"\r\n        maxLabel={max_duration}\r\n        valueText={`${Math.floor(average_duration)}ms`}\r\n        valueDescription=\"Average Delay\"\r\n        percentFull={duration_percent}\r\n      />\r\n      <h2 style={grade_style} className=\"at_a_glance_grade\">\r\n        Grade: {grade}\r\n      </h2>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/log_icon.f05e626f.svg\";","export default __webpack_public_path__ + \"static/media/health_icon.ae5e5c90.svg\";","export default __webpack_public_path__ + \"static/media/delay_icon.9b15b3cf.svg\";","import React, { useContext } from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport { motion } from \"framer-motion\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport default function MagnitudeIndicator(props) {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const height = 21;\r\n\r\n  const background_style = {\r\n    height,\r\n    width: \"80%\",\r\n    overflow: \"hidden\",\r\n  };\r\n\r\n  const thresholds = {\r\n    0.33: ColorScheme.get_color(\"green\", theme),\r\n    0.66: ColorScheme.get_color(\"yellow\", theme),\r\n    0.9: ColorScheme.get_color(\"red\", theme),\r\n  };\r\n\r\n  //determine foreground color with threshold\r\n  const value = Math.min(1, props.value);\r\n  let foreground_color;\r\n  for (let threshold_val in thresholds) {\r\n    foreground_color = thresholds[threshold_val];\r\n    if (threshold_val > value) {\r\n      break;\r\n    }\r\n  }\r\n  const foreground_style = {\r\n    backgroundColor: foreground_color,\r\n    height,\r\n    width: `${value * 100}%`,\r\n  };\r\n  if (theme === THEME.TI) {\r\n    background_style[\"backgroundColor\"] = ColorScheme.get_color(\"bg0\", theme);\r\n    background_style[\"boxShadow\"] = \"0px 0px 4px rgba(0, 0, 0, 0.3)\";\r\n  } else {\r\n    background_style[\"backgroundColor\"] = ColorScheme.get_color(\"bg1\", theme);\r\n    background_style[\"borderRadius\"] = 9;\r\n    foreground_style[\"borderRadius\"] = 9;\r\n  }\r\n\r\n  for (let key in props.style) {\r\n    background_style[key] = props.style[key];\r\n    foreground_style[key] = props.style[key];\r\n  }\r\n  const width = (value * 0.9 + 0.15) * 100;\r\n  return (\r\n    <>\r\n      <div style={background_style} data-tip={props.tooltip || \"N/A\"}>\r\n        <motion.div\r\n          animate={{ width }}\r\n          transition={{ duration: 0.5 }}\r\n          initial={false}\r\n          style={foreground_style}\r\n        />\r\n      </div>\r\n      <ReactTooltip effect=\"solid\" place=\"bottom\" delayHide={0} />\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\n\r\nexport default function StatusIndicator(props) {\r\n  const theme = useContext(ThemeContext);\r\n  const green = ColorScheme.get_color(\"green\", theme);\r\n  const red = ColorScheme.get_color(\"red\", theme);\r\n\r\n  const status_color = props.is_good_status ? green : red;\r\n  let style = {\r\n    backgroundColor: status_color,\r\n  };\r\n  if (theme === THEME.TI) {\r\n    style = {\r\n      width: 28,\r\n      height: 28,\r\n      boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.25)\",\r\n      ...style,\r\n    };\r\n  } else {\r\n    const border_color = ColorScheme.get_color(\"bg1\", theme);\r\n    style = {\r\n      width: 22,\r\n      height: 22,\r\n      border: `3px solid ${border_color}`,\r\n      borderRadius: 16,\r\n      ...style,\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div style={style}></div>\r\n    //   <svg\r\n    //     width=\"28\"\r\n    //     height=\"28\"\r\n    //     viewBox=\"0 0 28 28\"\r\n    //     fill=\"none\"\r\n    //     xmlns=\"http://www.w3.org/2000/svg\"\r\n    //   >\r\n    //     <circle\r\n    //       cx=\"14\"\r\n    //       cy=\"14\"\r\n    //       r=\"12.5\"\r\n    //       fill={status_color}\r\n    //       stroke={border_color}\r\n    //       strokeWidth=\"3\"\r\n    //     />\r\n    //   </svg>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\n\r\nexport default function FlexTable(props) {\r\n  const table_headers = props.table_format.map((col_format) => {\r\n    return (\r\n      <div\r\n        key={col_format.headerValue}\r\n        className=\"flex_table_datum\"\r\n        style={col_format.style}\r\n      >\r\n        {col_format.headerValue}\r\n      </div>\r\n    );\r\n  });\r\n  const theme = useContext(ThemeContext);\r\n  const row_height = 45;\r\n  const divider_height = 2;\r\n  let header_fg_color = null;\r\n  let header_bg_color = null;\r\n  let body_fg_color = null;\r\n  let row_rule_color = null;\r\n  let borderRadius = null;\r\n  let table_box_shadow = null;\r\n  let body_bg_color = ColorScheme.get_color(\"bg2\", theme);\r\n  if (theme === THEME.TI) {\r\n    header_bg_color = ColorScheme.get_color(\"red\", theme);\r\n    header_fg_color = ColorScheme.get_color(\"white\", theme);\r\n    body_fg_color = ColorScheme.get_color(\"gray\", theme);\r\n    row_rule_color = ColorScheme.get_color(\"gray_light\", theme);\r\n    borderRadius = 0;\r\n    table_box_shadow = \"0px 1px 14px rgba(0, 0, 0, 0.3)\";\r\n  } else {\r\n    header_bg_color = ColorScheme.get_color(\"bg3\", theme);\r\n    header_fg_color = ColorScheme.get_color(\"white\", theme);\r\n    body_fg_color = ColorScheme.get_color(\"white\", theme);\r\n    row_rule_color = ColorScheme.get_color(\"bg1\", theme);\r\n    borderRadius = 9;\r\n  }\r\n  const main_table_style = {\r\n    color: body_fg_color,\r\n    backgroundColor: body_bg_color,\r\n    height: 8 * (row_height + divider_height) + row_height,\r\n    boxShadow: table_box_shadow,\r\n    borderRadius,\r\n  };\r\n\r\n  const generateBodyRow = (elements) => {\r\n    console.assert(elements.length === props.table_format.length);\r\n    const wrapped_elems = elements.map((ele, index) => {\r\n      let bodyRowStyle = props.table_format[index].style;\r\n      return (\r\n        <div className=\"flex_table_datum\" style={bodyRowStyle} key={index}>\r\n          {ele}\r\n        </div>\r\n      );\r\n    });\r\n    const body_row_style = {\r\n      borderBottom: `${divider_height}px solid ${row_rule_color}`,\r\n      height: row_height,\r\n    };\r\n    return (\r\n      <div style={body_row_style} className=\"flex_table_row\">\r\n        {wrapped_elems}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const table_row_elements = props.table_rows.map((row) => {\r\n    return (\r\n      <props.row_component\r\n        key={row.id}\r\n        {...row}\r\n        {...props}\r\n        total_row_height={row_height + divider_height}\r\n        genRow={generateBodyRow}\r\n      />\r\n    );\r\n  });\r\n  const scrollbar_style = {\r\n    width: \"100%\",\r\n    height: 8 * (row_height + divider_height),\r\n  };\r\n  return (\r\n    <div style={main_table_style} className=\"flex_table\">\r\n      <div\r\n        style={{\r\n          borderTopLeftRadius: borderRadius,\r\n          borderTopRightRadius: borderRadius,\r\n          color: header_fg_color,\r\n          backgroundColor: header_bg_color,\r\n          height: row_height,\r\n        }}\r\n        className=\"flex_table_row flex_table_header_row\"\r\n      >\r\n        {table_headers}\r\n      </div>\r\n      <Scrollbars style={scrollbar_style}>\r\n        <div className=\"flex_table_body\">{table_row_elements}</div>\r\n      </Scrollbars>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/download_icon.3c6a8e03.svg\";","import React, { useContext, useState } from \"react\";\r\nimport \"../assets/FlexTable.css\";\r\nimport MagnitudeIndicator from \"./MagnitudeIndicator\";\r\nimport StatusIndicator from \"./StatusIndicator\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport FlexTable from \"./FlexTable\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport download_icon from \"../icons/download_icon.svg\";\r\n\r\nconst duration_max_baseline = 600;\r\n\r\nfunction PingRow(props) {\r\n  const start_matches = props.start.match(/(\\d{1,2}:\\d{1,2}:\\d{1,2}.*M)/);\r\n  const start = start_matches[1];\r\n  const ping_cols = [\r\n    \"\", //toggle filler\r\n    `n = ${props.index + 1}`,\r\n    start,\r\n    <MagnitudeIndicator\r\n      value={props.duration / duration_max_baseline}\r\n      tooltip={`${props.duration.toFixed(2)}ms`}\r\n    />,\r\n\r\n    <StatusIndicator is_good_status={props.was_success} />,\r\n  ];\r\n  return props.genRow(ping_cols);\r\n}\r\n\r\nfunction PingBurstRow(props) {\r\n  const [is_collapsed, setCollapse] = useState(true);\r\n  const theme = useContext(ThemeContext);\r\n  const records = props.records;\r\n  if (records.length === 0) {\r\n    const pingburst_cols = [\"\", props.id, \"N/A\", \"N/A\", \"N/A\"];\r\n    return props.genRow(pingburst_cols);\r\n  }\r\n  const min_start = records[0].start;\r\n  const min_start_matches = min_start.match(\r\n    /(\\d{1,2}\\/\\d{1,2}).*(\\d{1,2}:\\d{1,2}:\\d{1,2}).*(.M)/\r\n  );\r\n  const min_start_str =\r\n    // min_start_matches[1] +\r\n    // \" \" +\r\n    min_start_matches[2] + \" \" + min_start_matches[3];\r\n\r\n  const valid_duration_records = records.filter(\r\n    (record) => record.duration !== -1\r\n  );\r\n  const average_duration =\r\n    valid_duration_records.reduce(\r\n      (acc, cur) => (cur === -1 ? acc : acc + cur.duration),\r\n      0\r\n    ) / valid_duration_records.length;\r\n  const duration_indicator = (\r\n    <MagnitudeIndicator\r\n      value={average_duration / duration_max_baseline}\r\n      tooltip={`${average_duration.toFixed(2)}ms`}\r\n    />\r\n  );\r\n  const error_rate =\r\n    records.reduce((acc, record) => acc + (record.was_success ? 0 : 1), 0) /\r\n    records.length;\r\n  const error_rate_indicator = (\r\n    <MagnitudeIndicator\r\n      value={error_rate}\r\n      tooltip={`${error_rate.toFixed(2) * 100}%`}\r\n    />\r\n  );\r\n  const ping_rows = records.map((record, index) => (\r\n    <PingRow\r\n      key={record.start}\r\n      table_format={props.table_format}\r\n      index={index}\r\n      genRow={props.genRow}\r\n      {...record}\r\n    />\r\n  ));\r\n\r\n  const fill =\r\n    theme === THEME.TI\r\n      ? ColorScheme.get_color(\"gray\", THEME.TI)\r\n      : ColorScheme.get_color(\"bg1\", theme);\r\n  const toggle = (\r\n    <motion.svg\r\n      style={{ userSelect: \"none\", cursor: \"pointer\" }}\r\n      animate={{\r\n        rotate: is_collapsed ? 0 : 90,\r\n      }}\r\n      initial={false}\r\n      onClick={() => setCollapse(!is_collapsed)}\r\n      width=\"17\"\r\n      height=\"19\"\r\n      viewBox=\"0 0 17 19\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M16.1858 9.5L0.970119 18.5933L0.970119 0.406734L16.1858 9.5Z\"\r\n        fill={fill}\r\n      />\r\n    </motion.svg>\r\n  );\r\n\r\n  const pingburst_cols = [\r\n    toggle,\r\n    props.id,\r\n    min_start_str,\r\n    duration_indicator,\r\n    error_rate_indicator,\r\n  ];\r\n\r\n  const ping_row_variants = {\r\n    collapsed: {\r\n      height: 0,\r\n    },\r\n    open: {\r\n      height: props.total_row_height * props.records.length,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.genRow(pingburst_cols)}\r\n      <AnimatePresence>\r\n        {!is_collapsed && (\r\n          <motion.div\r\n            variants={ping_row_variants}\r\n            style={{\r\n              overflow: \"hidden\",\r\n            }}\r\n            initial=\"collapsed\"\r\n            animate=\"open\"\r\n            exit=\"collapsed\"\r\n          >\r\n            {ping_rows}\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </React.Fragment>\r\n  );\r\n}\r\n// }\r\n\r\nexport default function PingLog(props) {\r\n  const download_url = new URL(\"Ping_Results.csv\", document.ping_api_location);\r\n  const csv_download_button = (\r\n    // <a href={}>\r\n    <img\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n      alt=\"download\"\r\n      onClick={() => window.open(download_url)}\r\n      src={download_icon}\r\n    ></img>\r\n    // </a>\r\n  );\r\n  const table_format = [\r\n    {\r\n      headerValue: csv_download_button,\r\n      style: {\r\n        flexBasis: \"45px\",\r\n        flexGrow: \"0\",\r\n      },\r\n    },\r\n    {\r\n      headerValue: \"ID\",\r\n      style: {\r\n        flexGrow: \"1\",\r\n      },\r\n    },\r\n    {\r\n      headerValue: \"Start\",\r\n      style: {\r\n        flexGrow: \"1\",\r\n      },\r\n    },\r\n\r\n    {\r\n      headerValue: \"Duration (ms)\",\r\n      style: {\r\n        flexGrow: \"1\",\r\n      },\r\n    },\r\n    {\r\n      headerValue: \"Error Rate\",\r\n      style: {\r\n        flexGrow: \"1\",\r\n      },\r\n    },\r\n  ];\r\n\r\n  const table_rows = props.pingbursts\r\n    .slice()\r\n    .reverse()\r\n    .map((pingburst) => {\r\n      return {\r\n        id: pingburst.id,\r\n        ...pingburst,\r\n      };\r\n    });\r\n\r\n  return (\r\n    <FlexTable\r\n      row_component={PingBurstRow}\r\n      table_format={table_format}\r\n      table_rows={table_rows}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport * as d3 from \"d3\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\n\r\nfunction timestamp_string_to_date(timestamp) {\r\n  //example timestamp string \"10/31/2021, 10:49:35 AM 221ms\"\r\n  const date_regex_matches = timestamp.match(/(.*) (\\d{1,3})ms/);\r\n  //index 0 is the entire timestamp string\r\n  //index 1 is date time w/o ms\r\n  // index 2 is ms\r\n  if (date_regex_matches.length < 3) {\r\n    console.error(\"Could not convert timesatm string: \", timestamp);\r\n  }\r\n  const date_without_ms = date_regex_matches[1];\r\n  const ms = parseInt(date_regex_matches[2]);\r\n  const converted_date = new Date(date_without_ms);\r\n  converted_date.setMilliseconds(ms);\r\n  return converted_date;\r\n}\r\n\r\nfunction ip_series(pingbursts, dest_ip, label, color) {\r\n  let data = [];\r\n  for (let pingburst of pingbursts) {\r\n    const valid_pingburst =\r\n      pingburst.records.length !== 0 &&\r\n      pingburst.records[0].dest_ip === dest_ip;\r\n    if (!valid_pingburst) {\r\n      continue;\r\n    }\r\n    for (let record of pingburst.records) {\r\n      data.push({\r\n        start: timestamp_string_to_date(record.start),\r\n        duration: record.duration,\r\n      });\r\n    }\r\n  }\r\n  data = d3.sort(data, (datum) => datum.start);\r\n  return { data, color, id: dest_ip, label };\r\n}\r\nclass NetworkDelayChart extends React.Component {\r\n  static contextType = ThemeContext;\r\n\r\n  state = {\r\n    series_paths: [],\r\n  };\r\n  aspect_ratio = 19 / 15;\r\n  viewportHeight = 401;\r\n  viewportWidth = this.aspect_ratio * this.viewportHeight;\r\n  margin = {\r\n    top: 50,\r\n    bottom: 50,\r\n    right: 80,\r\n    left: 80,\r\n  };\r\n  x_axis_ref = React.createRef();\r\n  y_axis_ref = React.createRef();\r\n  x_gridlines_ref = React.createRef();\r\n  y_gridlines_ref = React.createRef();\r\n  x_scale = d3\r\n    .scaleTime()\r\n    .range([this.margin.left, this.viewportWidth - this.margin.right]);\r\n  y_scale = d3\r\n    .scaleLinear()\r\n    .range([this.viewportHeight - this.margin.bottom, this.margin.top]);\r\n  x_axis = d3.axisBottom().scale(this.x_scale).ticks(d3.timeMinute.every(1));\r\n  x_gridlines = d3\r\n    .axisBottom()\r\n    .scale(this.x_scale)\r\n    .ticks(d3.timeMinute.every(1))\r\n    .tickSize(-this.viewportHeight + this.margin.top + this.margin.bottom, 0)\r\n    .tickFormat(\"\");\r\n  y_axis = d3.axisLeft().scale(this.y_scale);\r\n  y_gridlines = d3\r\n    .axisLeft()\r\n    .scale(this.y_scale)\r\n    // .ticks(20)\r\n    .tickSize(-this.viewportWidth + this.margin.right + this.margin.left, 0)\r\n    .tickFormat(\"\");\r\n  lineGenerator = d3\r\n    .line()\r\n    .x((datum) => this.x_scale(datum.start))\r\n    .y((datum) => this.y_scale(datum.duration))\r\n    .defined((datum) => datum.duration !== -1);\r\n\r\n  // .tickSizeOuter(0);\r\n  //   const yAxis = d3.axisLeft(yScale).ticks(height / 40, yFormat);\r\n  componentDidUpdate() {\r\n    d3.select(this.x_axis_ref.current).call(this.x_axis);\r\n    d3.select(this.y_axis_ref.current).call(this.y_axis);\r\n    d3.select(this.x_gridlines_ref.current).call(this.x_gridlines);\r\n    d3.select(this.y_gridlines_ref.current).call(this.y_gridlines);\r\n  }\r\n  componentDidMount() {\r\n    d3.select(this.x_gridlines_ref.current).call(this.x_gridlines);\r\n    d3.select(this.y_gridlines_ref.current).call(this.y_gridlines);\r\n    d3.select(this.x_axis_ref.current).call(this.x_axis);\r\n    d3.select(this.y_axis_ref.current).call(this.y_axis);\r\n  }\r\n\r\n  render() {\r\n    const theme = this.context;\r\n\r\n    let text_color = null;\r\n    let grid_color = null;\r\n    if (theme === THEME.TI) {\r\n      text_color = ColorScheme.get_color(\"gray\", theme);\r\n      grid_color = ColorScheme.get_color_with_opacity(\"gray_light\", 0.6, theme);\r\n    } else {\r\n      text_color = ColorScheme.get_color(\"white\", theme);\r\n      grid_color = ColorScheme.get_color_with_opacity(\"gray\", 0.6, theme);\r\n    }\r\n    let available_line_colors = [\"blue\", \"green\", \"yellow\", \"orange\"].map(\r\n      (color_name) => ColorScheme.get_color(color_name, theme)\r\n    );\r\n\r\n    const { pingbursts, ip_address_info_array } = this.props;\r\n    console.log(this.props);\r\n    const series_array = ip_address_info_array\r\n      .filter((info) => info.is_selected)\r\n      .map((info, index) => {\r\n        return ip_series(\r\n          pingbursts,\r\n          info.ip_address,\r\n          info.nickname,\r\n          available_line_colors[index % available_line_colors.length]\r\n        );\r\n      });\r\n\r\n    const start = new Date();\r\n    start.setMinutes(start.getMinutes() - 5);\r\n    const finish = new Date();\r\n\r\n    //cull_times\r\n    for (const series of series_array) {\r\n      series.data = series.data.filter(\r\n        (datum) => start < datum.start && datum.start < finish\r\n      );\r\n    }\r\n    //make domain\r\n    this.x_scale.domain([start, finish]);\r\n\r\n    const all_y_maxes = series_array.map((series) =>\r\n      d3.max(series.data, (datum) => datum.duration)\r\n    );\r\n    const max = d3.max(all_y_maxes);\r\n    this.y_scale.domain([0, max]);\r\n\r\n    const series_paths = series_array.map((series) => {\r\n      return {\r\n        ...series,\r\n        d_string: this.lineGenerator(series.data),\r\n      };\r\n    });\r\n\r\n    const lines = series_paths.map((path) => (\r\n      <path\r\n        fill=\"none\"\r\n        key={path.id}\r\n        stroke={path.color}\r\n        d={path.d_string}\r\n      ></path>\r\n    ));\r\n\r\n    const legend_elements = series_paths.map((path, index) => {\r\n      const side = 14;\r\n      const spacing = side * 1.5;\r\n      return (\r\n        <g transform={`translate(5,${spacing * index})`}>\r\n          <rect fill={path.color} width={`${side}`} height={`${side}`}></rect>\r\n          <text\r\n            fill={text_color}\r\n            style={{ fontSize: 12 }}\r\n            textAnchor=\"start\"\r\n            dx=\"20\"\r\n            dy=\"12\"\r\n          >\r\n            {path.label}\r\n          </text>\r\n        </g>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <svg\r\n        style={{ width: \"100%\", color: text_color, overflow: \"visible\" }}\r\n        viewBox={`0 0 ${this.viewportWidth} ${this.viewportHeight}`}\r\n        preserveAspectRatio={\"xMidYMid\"}\r\n      >\r\n        {lines}\r\n        <g\r\n          ref={this.x_axis_ref}\r\n          transform={`translate(0, ${\r\n            this.viewportHeight - this.margin.bottom\r\n          })`}\r\n        />\r\n        <g\r\n          ref={this.x_gridlines_ref}\r\n          style={{ color: grid_color }}\r\n          transform={`translate(0, ${\r\n            this.viewportHeight - this.margin.bottom\r\n          })`}\r\n        />\r\n        <g\r\n          ref={this.y_gridlines_ref}\r\n          transform={`translate(${this.margin.left}, 0)`}\r\n          style={{ color: grid_color }}\r\n        />\r\n        <g\r\n          ref={this.y_axis_ref}\r\n          transform={`translate(${this.margin.left}, 0)`}\r\n        />\r\n        <g\r\n          transform={`translate(${this.margin.left / 3}, ${\r\n            (this.viewportHeight - this.margin.top - this.margin.bottom) / 2 +\r\n            this.margin.top\r\n          })`}\r\n        >\r\n          <g transform=\"rotate(-90)\" textAnchor=\"middle\">\r\n            <text fill={text_color}>Duration [ms]</text>\r\n          </g>\r\n        </g>\r\n\r\n        <g\r\n          textAnchor=\"middle\"\r\n          transform={`translate(${\r\n            (this.viewportWidth - this.margin.left - this.margin.right) / 2 +\r\n            this.margin.left\r\n          },${this.viewportHeight})`}\r\n        >\r\n          <text fill={text_color}>Start Time</text>\r\n        </g>\r\n        <g\r\n          textAnchor=\"middle\"\r\n          transform={`translate(${\r\n            (this.viewportWidth - this.margin.left - this.margin.right) / 2 +\r\n            this.margin.left\r\n          },${this.margin.top / 2})`}\r\n        >\r\n          <text\r\n            transform=\"scale(1.5,1.5)\"\r\n            fill={text_color}\r\n            style={{ fontWeight: 600 }}\r\n          >\r\n            Node Delay vs. Time\r\n          </text>\r\n        </g>\r\n        <g\r\n          transform={`translate(${this.viewportWidth - this.margin.right},${\r\n            this.margin.top\r\n          })`}\r\n        >\r\n          {legend_elements}\r\n        </g>\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class DelayMonitor extends React.Component {\r\n  render() {\r\n    return (\r\n      <Tile omit_header={true}>\r\n        <div\r\n          style={{\r\n            width: \"90%\",\r\n            marginTop: 20,\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginBottom: 60,\r\n          }}\r\n        >\r\n          <NetworkDelayChart {...this.props} />\r\n        </div>\r\n      </Tile>\r\n    );\r\n  }\r\n}\r\n","import React, { useContext } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\n\nexport default function BarChart(props) {\n  const results_map = props.results_map;\n  const results_array = [...results_map.values()];\n\n  const color_map = props.category_color_map;\n  const data = results_array.map((result) => result.average_success);\n  const backgroundColor = results_array.map((result) => {\n    return color_map[result.health_category].background;\n  });\n  const borderColor = results_array.map(\n    (result) => color_map[result.health_category].border\n  );\n\n  const theme = useContext(ThemeContext);\n  let text_color = null;\n  let grid_color = null;\n  if (theme === THEME.TI) {\n    text_color = ColorScheme.get_color(\"gray\", theme);\n    grid_color = ColorScheme.get_color_with_opacity(\"gray_light\", 0.6, theme);\n  } else {\n    text_color = ColorScheme.get_color(\"white\", theme);\n    grid_color = ColorScheme.get_color_with_opacity(\"gray\", 0.6, theme);\n  }\n\n  return (\n    <div>\n      <Bar\n        data={{\n          labels: [...results_map.keys()],\n          datasets: [\n            {\n              // label: \"average success rate\",\n              data,\n              backgroundColor,\n              borderColor,\n              borderWidth: 2,\n            },\n          ],\n        }}\n        height={400} //\n        // width={200}\n        color={text_color}\n        options={{\n          plugins: {\n            title: {\n              display: true,\n              text: \"Average Success Rate per Network Node\",\n              color: text_color,\n            },\n\n            legend: {\n              display: false,\n            },\n          },\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              max: 100,\n              beginAtZero: true,\n              ticks: {\n                color: text_color,\n              },\n              grid: {\n                color: grid_color,\n              },\n              title: {\n                display: true,\n                text: \"Percent Success\",\n                color: text_color,\n              },\n            },\n            x: {\n              ticks: {\n                color: text_color,\n              },\n              grid: {\n                color: grid_color,\n              },\n            },\n          },\n        }}\n      />\n    </div>\n  );\n}\n","import { useContext } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\nimport { HEALTH_CATEGORY } from \"./HealthMonitor\";\n\nexport default function PieChart(props) {\n  const results_map = props.results_map;\n  const results_array = [...results_map.values()];\n  const category_map = new Map();\n\n  const color_map = props.category_color_map;\n\n  function constructCategory(health_category) {\n    const filtered_results = results_array.filter(\n      (result) => result.health_category === health_category\n    );\n    category_map.set(health_category, filtered_results);\n  }\n  constructCategory(HEALTH_CATEGORY.URGENT);\n  constructCategory(HEALTH_CATEGORY.POOR);\n  constructCategory(HEALTH_CATEGORY.FAIR);\n  constructCategory(HEALTH_CATEGORY.GOOD);\n\n  const theme = useContext(ThemeContext);\n  let text_color = null;\n  if (theme === THEME.TI) {\n    text_color = ColorScheme.get_color(\"gray\", theme);\n  } else {\n    text_color = ColorScheme.get_color(\"white\", theme);\n  }\n\n  return (\n    <div>\n      <Pie\n        data={{\n          labels: [...category_map.keys()],\n          datasets: [\n            {\n              data: [...category_map.values()].map((x) => x.length),\n              backgroundColor: [...category_map.keys()].map(\n                (category) => color_map[category].background\n              ),\n              borderColor: [...category_map.keys()].map(\n                (category) => color_map[category].border\n              ),\n              borderWidth: 2,\n            },\n          ],\n        }}\n        height={400}\n        // width=\"100%\"\n        options={{\n          plugins: {\n            title: {\n              display: true,\n              text: \"Average Success Rate of Network Nodes\",\n              color: text_color,\n            },\n            legend: {\n              labels: {\n                fontSize: 25,\n                color: text_color,\n              },\n            },\n          },\n          maintainAspectRatio: false,\n        }}\n      />\n    </div>\n  );\n}\n","import Tile from \"./Tile\";\r\nimport BarChart from \"./BarChart\";\r\nimport PieChart from \"./PieChart\";\r\nimport { get_ip_address_info_by_ip } from \"../App\";\r\nimport { useContext } from \"react\";\r\nimport { ColorScheme, ThemeContext } from \"../ColorScheme\";\r\n\r\n// the values of the enum will be labels of graphs\r\nexport const HEALTH_CATEGORY = {\r\n  URGENT: \"0%-30%\",\r\n  POOR: \"30%-60%\",\r\n  FAIR: \"60%-90%\",\r\n  GOOD: \"90%-100%\",\r\n};\r\nObject.freeze(HEALTH_CATEGORY);\r\n\r\nfunction success_rate_to_category(success_rate) {\r\n  if (success_rate <= 30) {\r\n    return HEALTH_CATEGORY.URGENT;\r\n  } else if (success_rate <= 60) {\r\n    return HEALTH_CATEGORY.POOR;\r\n  } else if (success_rate <= 90) {\r\n    return HEALTH_CATEGORY.FAIR;\r\n  } else {\r\n    return HEALTH_CATEGORY.GOOD;\r\n  }\r\n}\r\n\r\nexport default function HealthMonitor(props) {\r\n  function average(array) {\r\n    return array.reduce((acc, cur) => acc + cur, 0) / array.length;\r\n  }\r\n\r\n  const useNicknameOverIP = true;\r\n  let pingbursts = props.pingbursts;\r\n  //has the ip's ->  average success rate, health category, number of samples used for the average\r\n  let results_map = new Map();\r\n  pingbursts = pingbursts.filter((pingburst) => pingburst.records.length > 0);\r\n  pingbursts.forEach((pingburst) => {\r\n    let pingburst_average_success =\r\n      average(\r\n        pingburst[\"records\"].map((records) => (records[\"was_success\"] ? 1 : 0))\r\n      ) * 100; //get the average of the current ping id\r\n    const ip = pingburst[\"records\"][0][\"dest_ip\"];\r\n    const ip_info = get_ip_address_info_by_ip(props.ip_address_info_array, ip);\r\n    if (!ip_info.is_selected) {\r\n      return;\r\n    }\r\n    const nickname = ip_info.nickname;\r\n    const label = useNicknameOverIP ? nickname : ip;\r\n    let ip_health_info = null;\r\n    if (results_map.has(label)) {\r\n      const health_info = results_map.get(label);\r\n      const pingburst_num_samples = pingburst.records.length;\r\n      const num_samples = health_info.num_samples + pingburst_num_samples;\r\n      //the new average, has to take into account previous amount of samples the average\r\n      const average_success =\r\n        (health_info.average_success * health_info.num_samples +\r\n          pingburst_average_success * pingburst_num_samples) /\r\n        num_samples;\r\n      ip_health_info = {\r\n        average_success,\r\n        num_samples,\r\n        health_category: success_rate_to_category(average_success),\r\n      };\r\n    } else {\r\n      ip_health_info = {\r\n        average_success: pingburst_average_success,\r\n        num_samples: pingburst.records.length,\r\n        health_category: success_rate_to_category(pingburst_average_success),\r\n      };\r\n    }\r\n\r\n    results_map.set(label, ip_health_info);\r\n  });\r\n\r\n  const theme = useContext(ThemeContext);\r\n  const category_color_name_map = {\r\n    [HEALTH_CATEGORY.URGENT]: \"red\",\r\n    [HEALTH_CATEGORY.POOR]: \"orange\",\r\n    [HEALTH_CATEGORY.FAIR]: \"yellow\",\r\n    [HEALTH_CATEGORY.GOOD]: \"green\",\r\n  };\r\n  const category_color_map = {};\r\n  Object.keys(category_color_name_map).forEach((category) => {\r\n    const color_name = category_color_name_map[category];\r\n    category_color_map[category] = {\r\n      background: ColorScheme.get_color_with_opacity(color_name, 0.6, theme),\r\n      border: ColorScheme.get_color(color_name, theme),\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Tile omit_header={true}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          marginTop: 20,\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n          width: \"80%\",\r\n          marginBottom: 40,\r\n          gap: 50,\r\n        }}\r\n      >\r\n        <BarChart\r\n          results_map={results_map}\r\n          category_color_map={category_color_map}\r\n        />\r\n        <PieChart\r\n          results_map={results_map}\r\n          category_color_map={category_color_map}\r\n        />\r\n      </div>\r\n    </Tile>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport app_fonts from \"./AppFonts.js\";\nimport { THEME, ColorScheme, ThemeContext } from \"./ColorScheme\";\nimport Pane from \"./components/Pane\";\nimport Tile, { TileHeader } from \"./components/Tile\";\nimport PingConfig from \"./components/PingConfig\";\nimport AtAGlance from \"./components/AtAGlance\";\nimport Monitor from \"./components/Monitor\";\nimport Scrollbars from \"react-custom-scrollbars\";\nimport IPAddressTable from \"./components/IPAddressTable\";\nimport Topology from \"./components/Topology\";\nimport produce from \"immer\";\nimport ThemeToggle from \"./components/ThemeToggle\";\nimport SettingsButton from \"./components/SettingsButton\";\n\nfunction nickname_generator() {\n  const nicknames = [\n    \"Alfa\",\n    \"Bravo\",\n    \"Charlie\",\n    \"Delta\",\n    \"Echo\",\n    \"Foxtrot\",\n    \"Golf\",\n    \"Hotel\",\n    \"India\",\n    \"Juliett\",\n    \"Kilo\",\n    \"Lima\",\n    \"Mike\",\n    \"November\",\n    \"Oscar\",\n    \"Papa\",\n    \"Quebec\",\n    \"Romeo\",\n    \"Sierra\",\n    \"Tango\",\n    \"Uniform\",\n    \"Victor\",\n    \"Whiskey\",\n    \"X-ray\",\n    \"Yankee\",\n    \"Zulu\",\n  ];\n  const index = Math.floor(Math.random() * nicknames.length);\n  return nicknames[index];\n}\n\nexport function get_ip_address_info_by_ip(ip_address_info_array, ip) {\n  for (const ip_address_info of ip_address_info_array) {\n    if (ip_address_info.ip_address === ip) {\n      return ip_address_info;\n    }\n  }\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topology: { nodes: [], edges: [] },\n      ip_address_info_array: [],\n      pingbursts: [],\n      ping_api_location: \"http://localhost:8000\",\n      theme: THEME.TI,\n    };\n\n    let body = document.getElementsByTagName(\"body\")[0];\n    body.style.backgroundColor = ColorScheme.get_color(\"bg0\", this.state.theme);\n    body.style.boxSizing = \"border-box\";\n    body.style.margin = \"0\";\n\n    for (const key in app_fonts) {\n      body.style[key] = app_fonts[key];\n    }\n\n    document.ping_api_location = this.state.ping_api_location;\n\n    //update pingbursts func\n    setInterval(async () => {\n      let request_opts = {\n        method: \"GET\",\n        mode: \"cors\",\n      };\n      let pingburst_res, topology_res;\n      try {\n        pingburst_res = await fetch(\n          new URL(\"pingbursts\", document.ping_api_location),\n          request_opts\n        );\n        topology_res = await fetch(\n          new URL(\"topology\", document.ping_api_location),\n          request_opts\n        );\n        if (!pingburst_res.ok || !topology_res.ok) {\n          throw Error(\"[PING MODULE] : Received not ok response\");\n        }\n      } catch (error) {\n        console.debug(error);\n        return;\n      }\n      const topology = await topology_res.json();\n      const pingbursts = await pingburst_res.json();\n      this.setState((state) => {\n        return produce(state, (draft) => {\n          //find diff of ip_addresses\n          function calc_diff_ips(old_topology, new_topology) {\n            const old_ips = old_topology.nodes.reduce(\n              (ip_set, node) => ip_set.add(node.data.id),\n              new Set()\n            );\n            const difference = [];\n            for (const node of new_topology.nodes) {\n              const current_ip = node.data.id;\n              if (!old_ips.has(current_ip)) {\n                difference.push(current_ip);\n              }\n            }\n            return difference;\n          }\n          const diff_ips = calc_diff_ips(draft.topology, topology);\n          //Add new entries to ip_address_info_array\n          const diff_ip_address_info_array = diff_ips.map((ip_address) => {\n            const nickname = nickname_generator();\n            return {\n              is_selected: false,\n              ip_address,\n              nickname,\n              is_connected: true,\n            };\n          });\n          draft.ip_address_info_array.push(...diff_ip_address_info_array);\n          draft.topology = topology;\n          draft.pingbursts = pingbursts;\n        });\n      });\n    }, 1000);\n  }\n\n  ip_selection_handler = (ip, is_selected) => {\n    this.setState((state) =>\n      produce(state, (draft) => {\n        const ip_address_info = draft.ip_address_info_array.find(\n          (info) => info.ip_address === ip\n        );\n        ip_address_info.is_selected = is_selected;\n      })\n    );\n  };\n\n  change_ping_api_location_handler = (ping_api_location) => {\n    document.ping_api_location = ping_api_location;\n    this.setState({ ping_api_location });\n  };\n\n  render() {\n    let body = document.getElementsByTagName(\"body\")[0];\n    body.style.backgroundColor = ColorScheme.get_color(\"bg0\", this.state.theme);\n    const dash_title_container_style = {\n      backgroundColor:\n        this.state.theme === \"ti\"\n          ? ColorScheme.get_color(\"red\", THEME.TI)\n          : \"rgba(0,0,0,0)\",\n    };\n    return (\n      <ThemeContext.Provider value={this.state.theme}>\n        <Scrollbars style={{ height: \"100vh\", width: \"100vw\" }}>\n          <div className=\"top_vstack\">\n            <div\n              className=\"dash_title_container\"\n              style={dash_title_container_style}\n            >\n              <h1 className=\"dash_title\">Your Wi-SUN Network</h1>\n              <div\n                style={{\n                  marginRight: \"5.9427vw\",\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                }}\n              >\n                <ThemeToggle\n                  handle_new_theme={(theme) => this.setState({ theme })}\n                />\n                <SettingsButton\n                  change_handler={this.change_ping_api_location_handler}\n                  {...this.state}\n                />\n              </div>\n            </div>\n            <div className=\"pane_container\">\n              <Pane>\n                <div className=\"tile_container_full tile_container_common\">\n                  <Tile title=\"Topology\">\n                    <Topology\n                      ip_selection_handler={this.ip_selection_handler}\n                      ip_address_info_array={this.state.ip_address_info_array}\n                      elements={this.state.topology}\n                    />\n                  </Tile>\n                </div>\n                <div className=\"tile_container_full tile_container_common\">\n                  <TileHeader title=\"IP Addresses\" />\n                  <IPAddressTable\n                    ip_selection_handler={this.ip_selection_handler}\n                    ip_address_info_array={this.state.ip_address_info_array}\n                  />\n                </div>\n              </Pane>\n              <Pane>\n                <div className=\"tile_container_hstack tile_container_common\">\n                  <div className=\"tile_container_half\">\n                    <Tile title=\"Ping Config\">\n                      <PingConfig\n                        ip_address_info_array={this.state.ip_address_info_array}\n                      />\n                    </Tile>\n                  </div>\n                  <div className=\"tile_container_half\">\n                    <Tile title=\"At A Glance\">\n                      <AtAGlance {...this.state} />\n                    </Tile>\n                  </div>\n                </div>\n                <div className=\"tile_container_full tile_container_common\">\n                  <Monitor {...this.state} />\n                </div>\n              </Pane>\n            </div>\n          </div>\n        </Scrollbars>\n      </ThemeContext.Provider>\n    );\n  }\n}\n","import React from \"react\";\nimport \"../assets/Monitor.css\";\nimport log_icon from \"../icons/log_icon.svg\";\nimport health_icon from \"../icons/health_icon.svg\";\nimport delay_icon from \"../icons/delay_icon.svg\";\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\nimport PingLog from \"./PingLog\";\nimport DelayMonitor from \"./DelayMonitor\";\nimport HealthMonitor from \"./HealthMonitor\";\n\nconst MONITOR_STATE = {\n  LOG: 0,\n  HEALTH: 1,\n  DELAY: 2,\n};\nObject.freeze(MONITOR_STATE);\n\nexport default class Monitor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monitor_state: MONITOR_STATE.LOG,\n    };\n  }\n\n  render() {\n    let current_display = null;\n    switch (this.state.monitor_state) {\n      case MONITOR_STATE.DELAY:\n        current_display = <DelayMonitor {...this.props} />;\n        break;\n      case MONITOR_STATE.LOG:\n        current_display = <PingLog {...this.props} />;\n        break;\n      case MONITOR_STATE.HEALTH:\n        current_display = <HealthMonitor {...this.props} />;\n        break;\n      default:\n        console.error(\n          \"Encountered invalid MONITOR_STATE\",\n          this.state.monitor_state\n        );\n    }\n\n    let monitor_tab_button_style = null;\n    const theme = this.context;\n    if (theme === THEME.TI) {\n      monitor_tab_button_style = {\n        backgroundColor: ColorScheme.get_color(\"gray\", theme),\n      };\n    } else {\n      const bg0 = ColorScheme.get_color(\"bg0\", theme);\n      monitor_tab_button_style = {\n        backgroundColor: bg0,\n      };\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"monitor_tab_button_array\">\n          <button\n            style={monitor_tab_button_style}\n            className=\"monitor_tab_button\"\n            onClick={() => {\n              this.setState({ monitor_state: MONITOR_STATE.LOG });\n            }}\n          >\n            <img src={log_icon} alt=\"log\" />\n          </button>\n          <button\n            style={monitor_tab_button_style}\n            className=\"monitor_tab_button\"\n            onClick={() => {\n              this.setState({ monitor_state: MONITOR_STATE.HEALTH });\n            }}\n          >\n            <img src={health_icon} alt=\"health\" />\n          </button>\n          <button\n            style={monitor_tab_button_style}\n            className=\"monitor_tab_button\"\n            onClick={() => {\n              this.setState({ monitor_state: MONITOR_STATE.DELAY });\n            }}\n          >\n            <img src={delay_icon} alt=\"delay\" />\n          </button>\n        </div>\n        {current_display}\n      </React.Fragment>\n    );\n  }\n}\nMonitor.contextType = ThemeContext;\n","import React, { useContext } from \"react\";\r\nimport \"../assets/CheckBox.css\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\n\r\nexport default function CheckBox(props) {\r\n  const theme = useContext(ThemeContext);\r\n  let bg_style = null;\r\n  let fg_style = null;\r\n  if (theme === THEME.TI) {\r\n    bg_style = {\r\n      backgroundColor: ColorScheme.get_color(\"bg0\", theme),\r\n      boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.25) \",\r\n    };\r\n    fg_style = {\r\n      backgroundColor: ColorScheme.get_color(\"gray\", theme),\r\n    };\r\n  } else {\r\n    const borderRadius = 5;\r\n    bg_style = {\r\n      backgroundColor: ColorScheme.get_color(\"bg1\", theme),\r\n      borderRadius,\r\n    };\r\n    fg_style = {\r\n      backgroundColor: ColorScheme.get_color(\"fg0\", theme),\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={bg_style}\r\n      className=\"checkbox_bg\"\r\n      onClick={(event) => {\r\n        props.click_handler(!props.is_checked);\r\n      }}\r\n    >\r\n      {props.is_checked && <div style={fg_style} className=\"checkbox_fg\"></div>}\r\n    </div>\r\n  );\r\n}\r\n","import \"../assets/FlexTable.css\";\r\nimport CheckBox from \"./CheckBox\";\r\nimport StatusIndicator from \"./StatusIndicator\";\r\nimport FlexTable from \"./FlexTable\";\r\n\r\n// const example_ip_address_info_array = [\r\n//   {\r\n//     ip_address: \"aaaa\",\r\n//     nickname: \"alpha\",\r\n//     is_connected: false,\r\n//     is_selected: false,\r\n//   },\r\n//   {\r\n//     ip_address: \"bbbb\",\r\n//     nickname: \"beta\",\r\n//     is_connected: true,\r\n//     is_selected: true,\r\n//   },\r\n//   {\r\n//     ip_address: \"cccc\",\r\n//     nickname: \"gamma\",\r\n//     is_connected: false,\r\n//     is_selected: true,\r\n//   },\r\n// ];\r\n\r\n// function getIPAddressInfoByIPs(ip_addresses) {\r\n//   return ip_addresses.map((ip_address) =>\r\n//     example_ip_address_info_array.find((ele) => ele.ip_address === ip_address)\r\n//   );\r\n// }\r\n\r\nfunction IPAddressRow(props) {\r\n  return props.genRow([\r\n    <CheckBox\r\n      click_handler={(newVal) =>\r\n        props.ip_selection_handler(props.ip_address, newVal)\r\n      }\r\n      is_checked={props.is_selected}\r\n    />,\r\n    props.ip_address,\r\n    props.nickname,\r\n    <StatusIndicator is_good_status={props.is_connected} />,\r\n  ]);\r\n}\r\n\r\nexport default function IPAddressTable(props) {\r\n  let all_ips_selected = true;\r\n  for (const ip_info of props.ip_address_info_array) {\r\n    if (!ip_info.is_selected) {\r\n      all_ips_selected = false;\r\n      break;\r\n    }\r\n  }\r\n\r\n  const toggle_selection_all_ips = (val) => {\r\n    for (const ip_info of props.ip_address_info_array) {\r\n      props.ip_selection_handler(ip_info.ip_address, val);\r\n    }\r\n  };\r\n\r\n  const table_format = [\r\n    {\r\n      headerValue: (\r\n        <CheckBox\r\n          is_checked={all_ips_selected}\r\n          click_handler={toggle_selection_all_ips}\r\n        />\r\n      ),\r\n      style: {\r\n        flexBasis: \"40px\",\r\n        flexGrow: \"0\",\r\n      },\r\n    },\r\n    {\r\n      headerValue: \"IP\",\r\n      style: {\r\n        flexGrow: \"1\",\r\n      },\r\n    },\r\n    {\r\n      headerValue: \"Nickname\",\r\n      style: {\r\n        flexGrow: \"1\",\r\n      },\r\n    },\r\n    {\r\n      headerValue: \"Status\",\r\n      style: {\r\n        flexBasis: \"100px\",\r\n        flexGrow: \"0\",\r\n      },\r\n    },\r\n  ];\r\n\r\n  const table_rows = props.ip_address_info_array.map((ip_address_info) => {\r\n    return {\r\n      id: ip_address_info.ip_address,\r\n      ip_selection_handler: props.ip_selection_handler,\r\n      ...ip_address_info,\r\n    };\r\n  });\r\n  return (\r\n    <FlexTable\r\n      row_component={IPAddressRow}\r\n      table_format={table_format}\r\n      table_rows={table_rows}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport cytoscape from \"cytoscape\";\r\nimport CytoscapeComponent from \"react-cytoscapejs\";\r\nimport dagre from \"cytoscape-dagre\";\r\nimport produce from \"immer\";\r\n// import \"../assets/Pane.css\";\r\ncytoscape.use(dagre);\r\n\r\nexport default class Topology extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.layout = { name: \"dagre\" };\r\n\r\n    const ti_gray = ColorScheme.get_color(\"gray\", THEME.TI);\r\n    const ti_blue = ColorScheme.get_color(\"blue\", THEME.TI);\r\n    const ti_red = ColorScheme.get_color(\"red\", THEME.TI);\r\n    this.previous_theme = this.context;\r\n    this.ti_stylesheet = [\r\n      {\r\n        selector: \"node\",\r\n        style: {\r\n          \"background-color\": ti_red,\r\n        },\r\n      },\r\n      {\r\n        selector: \"edge\",\r\n        style: {\r\n          width: 3,\r\n          \"line-color\": ti_gray,\r\n          \"target-arrow-color\": ti_gray,\r\n          \"target-arrow-shape\": \"triangle\",\r\n          \"curve-style\": \"bezier\",\r\n        },\r\n      },\r\n      {\r\n        selector: \"node:selected\",\r\n        style: {\r\n          \"background-color\": ti_blue,\r\n        },\r\n      },\r\n    ];\r\n    const fg0 = ColorScheme.get_color(\"fg0\");\r\n    const gruvbox_blue = ColorScheme.get_color(\"blue\", THEME.GRUVBOX);\r\n    const gruvbox_orange = ColorScheme.get_color(\"orange\", THEME.GRUVBOX); //currently no ti orange color so use gruvbox for both\r\n    this.gruvbox_stylesheet = [\r\n      {\r\n        selector: \"node\",\r\n        style: {\r\n          \"background-color\": gruvbox_orange,\r\n        },\r\n      },\r\n      {\r\n        selector: \"edge\",\r\n        style: {\r\n          width: 3,\r\n          \"line-color\": fg0,\r\n          \"target-arrow-color\": fg0,\r\n          \"target-arrow-shape\": \"triangle\",\r\n          \"curve-style\": \"bezier\",\r\n        },\r\n      },\r\n      {\r\n        selector: \"node:selected\",\r\n        style: {\r\n          \"background-color\": gruvbox_blue,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n  componentDidMount() {\r\n    this.cy.on(\"select\", \"node\", (e) => {\r\n      const node = e.target;\r\n      this.props.ip_selection_handler(node.id(), true);\r\n    });\r\n    this.cy.on(\"unselect\", \"node\", (e) => {\r\n      const node = e.target;\r\n      this.props.ip_selection_handler(node.id(), false);\r\n    });\r\n    this.cy.on(\"add\", \"node\", (_evt) => {\r\n      this.cy.layout(this.layout).run();\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.context !== this.previous_theme) {\r\n      this.cy.style(\r\n        this.context === THEME.TI ? this.ti_stylesheet : this.gruvbox_stylesheet\r\n      );\r\n      this.previous_theme = this.context;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const ip_info_array = this.props.ip_address_info_array;\r\n    const unnormalized_elements = produce(this.props.elements, (elements) => {\r\n      const nodes = elements.nodes;\r\n      for (const node of nodes) {\r\n        const ip_info = ip_info_array.find(\r\n          (ip_info) => ip_info.ip_address === node.data.id\r\n        );\r\n        node.selected = ip_info.is_selected;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <CytoscapeComponent\r\n        elements={CytoscapeComponent.normalizeElements(unnormalized_elements)}\r\n        cy={(cy) => {\r\n          this.cy = cy;\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n        layout={this.layout}\r\n        stylesheet={\r\n          this.context === THEME.TI\r\n            ? this.ti_stylesheet\r\n            : this.gruvbox_stylesheet\r\n        }\r\n        wheelSensitivity={0.1}\r\n      />\r\n    );\r\n    // return <div style={{ width: \"100%\" }} id=\"cy\"></div>;\r\n  }\r\n}\r\nTopology.contextType = ThemeContext;\r\n","export default __webpack_public_path__ + \"static/media/day_icon.8d84fdde.svg\";","export default __webpack_public_path__ + \"static/media/night_icon.abd364c8.svg\";","import { useContext } from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport day_icon from \"../icons/day_icon.svg\";\r\nimport night_icon from \"../icons/night_icon.svg\";\r\n\r\nexport default function ThemeToggle(props) {\r\n  const theme = useContext(ThemeContext);\r\n  // let borderRadius = props.theme === THEME.TI ? 0 : 9;\r\n\r\n  const is_ti_themed = theme === THEME.TI;\r\n  let borderRadius = 9;\r\n  const boxShadow = is_ti_themed\r\n    ? \"0px 0px 11px rgba(0, 0, 0, 0.4)\"\r\n    : undefined;\r\n\r\n  let displayElement = null;\r\n  let slider_background = null;\r\n  if (is_ti_themed) {\r\n    slider_background = ColorScheme.get_color(\"red_dark\", theme);\r\n    displayElement = (\r\n      <>\r\n        <img alt=\"day theme\" src={day_icon}></img>\r\n        <div\r\n          style={{\r\n            backgroundColor: ColorScheme.get_color(\"bg3\", THEME.TI),\r\n            width: 32,\r\n            height: 32,\r\n            borderRadius,\r\n          }}\r\n        ></div>\r\n      </>\r\n    );\r\n  } else {\r\n    slider_background = ColorScheme.get_color(\"bg1\", theme);\r\n\r\n    displayElement = (\r\n      <>\r\n        <div\r\n          style={{\r\n            backgroundColor: ColorScheme.get_color(\"bg2\", theme),\r\n            width: 32,\r\n            height: 32,\r\n            borderRadius,\r\n          }}\r\n        ></div>\r\n        <img alt=\"night theme\" src={night_icon}></img>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: 64,\r\n        height: 32,\r\n        backgroundColor: slider_background,\r\n        borderRadius,\r\n        display: \"flex\",\r\n        cursor: \"pointer\",\r\n        flexDirection: \"row\",\r\n        boxShadow,\r\n      }}\r\n      onClick={() => {\r\n        const new_is_ti_themed = !is_ti_themed;\r\n        props.handle_new_theme(new_is_ti_themed ? THEME.TI : THEME.GRUVBOX);\r\n      }}\r\n    >\r\n      {displayElement}\r\n    </div>\r\n  );\r\n}\r\n","import { motion } from \"framer-motion\";\r\nimport { useContext, useState } from \"react\";\r\nimport { ColorScheme, THEME, ThemeContext } from \"../ColorScheme\";\r\nimport \"../assets/SettingsButton.css\";\r\n\r\nexport default function SettingsButton(props) {\r\n  const theme = useContext(ThemeContext);\r\n  const [is_hovering, set_hover_state] = useState(false);\r\n  let surface_style = {\r\n    width: \"19.607vw\",\r\n    position: \"absolute\",\r\n    top: \"calc(100% + 10px)\",\r\n    right: \"0px\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  };\r\n\r\n  let input_style = {\r\n    width: \"100%\",\r\n    border: 0,\r\n    height: 26,\r\n    fontFamily: \"inherit\",\r\n    fontWeight: \"inherit\",\r\n    paddingLeft: 10,\r\n  };\r\n  if (theme === THEME.TI) {\r\n    surface_style = {\r\n      backgroundColor: ColorScheme.get_color(\"bg2\", theme),\r\n      // borderTop: `3px solid ${ColorScheme.get_color(\"red\", theme)}`,\r\n      boxShadow: \"0px 1px 14px rgba(0, 0, 0, 0.3)\",\r\n      color: ColorScheme.get_color(\"gray\", theme),\r\n      borderRadius: 0,\r\n      ...surface_style,\r\n    };\r\n    input_style = {\r\n      backgroundColor: ColorScheme.get_color(\"bg0\", theme),\r\n      boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.3)\",\r\n      ...input_style,\r\n    };\r\n  } else {\r\n    surface_style = {\r\n      backgroundColor: ColorScheme.get_color(\"bg2\", theme),\r\n      borderRadius: 10,\r\n      ...surface_style,\r\n    };\r\n    input_style = {\r\n      backgroundColor: ColorScheme.get_color(\"bg1\", theme),\r\n      color: \"white\",\r\n      borderRadius: 5,\r\n      ...input_style,\r\n    };\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        position: \"relative\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        fontWeight: 500,\r\n      }}\r\n    >\r\n      <motion.svg\r\n        whileTap={{ rotate: 90 }}\r\n        onClick={() => set_hover_state(!is_hovering)}\r\n        style={{\r\n          marginLeft: 10,\r\n          cursor: \"pointer\",\r\n        }}\r\n        width=\"24\"\r\n        height=\"24\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path\r\n          fillRule=\"evenodd\"\r\n          clipRule=\"evenodd\"\r\n          d=\"M13.9838 2.54161C14.0711 2.71093 14.0928 2.92777 14.1361 3.36144C14.2182 4.1823 14.2593 4.59274 14.4311 4.81793C14.649 5.10358 15.0034 5.25038 15.3595 5.20248C15.6402 5.16472 15.9594 4.90352 16.5979 4.38113C16.9352 4.10515 17.1038 3.96716 17.2853 3.90918C17.5158 3.83555 17.7652 3.84798 17.9872 3.94419C18.162 4.01994 18.3161 4.17402 18.6243 4.4822L19.5178 5.37567C19.8259 5.68385 19.98 5.83794 20.0558 6.01275C20.152 6.23478 20.1644 6.48415 20.0908 6.71464C20.0328 6.89612 19.8948 7.06478 19.6188 7.4021C19.0964 8.0406 18.8352 8.35984 18.7975 8.64056C18.7496 8.99662 18.8964 9.35102 19.182 9.56893C19.4072 9.74072 19.8176 9.78176 20.6385 9.86385C21.0722 9.90722 21.2891 9.92891 21.4584 10.0162C21.6734 10.1272 21.841 10.3123 21.9299 10.5373C22 10.7145 22 10.9324 22 11.3682V12.6319C22 13.0676 22 13.2855 21.93 13.4626C21.841 13.6877 21.6734 13.8729 21.4583 13.9838C21.289 14.0711 21.0722 14.0928 20.6386 14.1361L20.6386 14.1361C19.818 14.2182 19.4077 14.2592 19.1825 14.4309C18.8967 14.6489 18.7499 15.0034 18.7979 15.3596C18.8357 15.6402 19.0968 15.9593 19.619 16.5976C19.8949 16.9348 20.0328 17.1034 20.0908 17.2848C20.1645 17.5154 20.152 17.7648 20.0558 17.9869C19.98 18.1617 19.826 18.3157 19.5179 18.6238L18.6243 19.5174C18.3162 19.8255 18.1621 19.9796 17.9873 20.0554C17.7652 20.1516 17.5159 20.164 17.2854 20.0904C17.1039 20.0324 16.9352 19.8944 16.5979 19.6184L16.5979 19.6184C15.9594 19.096 15.6402 18.8348 15.3595 18.7971C15.0034 18.7492 14.649 18.896 14.4311 19.1816C14.2593 19.4068 14.2183 19.8173 14.1362 20.6383C14.0928 21.0722 14.0711 21.2891 13.9837 21.4585C13.8728 21.6735 13.6877 21.8409 13.4628 21.9299C13.2856 22 13.0676 22 12.6316 22H11.3682C10.9324 22 10.7145 22 10.5373 21.9299C10.3123 21.841 10.1272 21.6734 10.0162 21.4584C9.92891 21.2891 9.90722 21.0722 9.86385 20.6385C9.78176 19.8176 9.74072 19.4072 9.56892 19.182C9.35101 18.8964 8.99663 18.7496 8.64057 18.7975C8.35985 18.8352 8.04059 19.0964 7.40208 19.6189L7.40206 19.6189C7.06473 19.8949 6.89607 20.0329 6.71458 20.0908C6.4841 20.1645 6.23474 20.152 6.01272 20.0558C5.8379 19.9801 5.6838 19.826 5.37561 19.5178L4.48217 18.6243C4.17398 18.3162 4.01988 18.1621 3.94414 17.9873C3.84794 17.7652 3.8355 17.5159 3.90913 17.2854C3.96711 17.1039 4.10511 16.9352 4.3811 16.5979C4.90351 15.9594 5.16471 15.6402 5.20247 15.3594C5.25037 15.0034 5.10357 14.649 4.81792 14.4311C4.59273 14.2593 4.1823 14.2182 3.36143 14.1361C2.92776 14.0928 2.71093 14.0711 2.54161 13.9838C2.32656 13.8728 2.15902 13.6877 2.07005 13.4627C2 13.2855 2 13.0676 2 12.6318V11.3683C2 10.9324 2 10.7144 2.07008 10.5372C2.15905 10.3123 2.32654 10.1272 2.54152 10.0163C2.71088 9.92891 2.92777 9.90722 3.36155 9.86384H3.36155H3.36156C4.18264 9.78173 4.59319 9.74068 4.81842 9.56881C5.10395 9.35092 5.2507 8.99664 5.20287 8.64066C5.16514 8.35987 4.90385 8.04052 4.38128 7.40182C4.10516 7.06435 3.96711 6.89561 3.90914 6.71405C3.83557 6.48364 3.848 6.23438 3.94413 6.01243C4.01988 5.83754 4.17403 5.68339 4.48233 5.37509L5.37565 4.48177L5.37566 4.48177C5.68385 4.17357 5.83795 4.01947 6.01277 3.94373C6.23478 3.84753 6.48414 3.8351 6.71463 3.90872C6.89612 3.9667 7.06481 4.10472 7.4022 4.38076C8.04061 4.9031 8.35982 5.16427 8.64044 5.20207C8.99661 5.25003 9.35113 5.10319 9.56907 4.81742C9.74077 4.59227 9.78181 4.18195 9.86387 3.36131C9.90722 2.92776 9.9289 2.71098 10.0162 2.5417C10.1271 2.32658 10.3123 2.15898 10.5374 2.07001C10.7145 2 10.9324 2 11.3681 2H12.6318C13.0676 2 13.2855 2 13.4627 2.07005C13.6877 2.15902 13.8728 2.32656 13.9838 2.54161ZM12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16Z\"\r\n          fill=\"white\"\r\n        />\r\n      </motion.svg>\r\n\r\n      <motion.div\r\n        style={surface_style}\r\n        initial={false}\r\n        animate={{\r\n          opacity: is_hovering ? 1 : 0,\r\n          x: is_hovering ? 0 : 100,\r\n        }}\r\n        transition={{\r\n          duration: 0.3,\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-evenly\",\r\n            width: \"87.5%\",\r\n            height: 80,\r\n          }}\r\n        >\r\n          <p\r\n            style={{\r\n              alignSelf: \"flex-start\",\r\n              margin: 0,\r\n              userSelect: \"none\",\r\n            }}\r\n          >\r\n            Backend URL\r\n          </p>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              props.change_handler(e.target.value);\r\n            }}\r\n            className=\"settings_input\"\r\n            value={props.ping_api_location}\r\n            style={input_style}\r\n          ></input>\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"ping-root\"));\n"],"sourceRoot":""}